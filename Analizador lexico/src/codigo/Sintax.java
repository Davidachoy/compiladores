
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 20 17:54:45 CST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 20 17:54:45 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\165\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\004\000\002\002\005\000\002\033\007" +
    "\000\002\011\005\000\002\003\004\000\002\004\007\000" +
    "\002\012\004\000\002\012\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\057\010\000\002\017" +
    "\010\000\002\045\010\000\002\045\004\000\002\045\002" +
    "\000\002\026\007\000\002\030\007\000\002\032\011\000" +
    "\002\027\004\000\002\027\004\000\002\027\004\000\002" +
    "\027\004\000\002\027\003\000\002\013\004\000\002\013" +
    "\004\000\002\013\003\000\002\013\004\000\002\013\004" +
    "\000\002\013\004\000\002\013\004\000\002\013\005\000" +
    "\002\013\004\000\002\013\004\000\002\034\005\000\002" +
    "\034\006\000\002\035\005\000\002\035\006\000\002\036" +
    "\003\000\002\022\003\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\021\003\000\002\021\005\000" +
    "\002\021\004\000\002\040\003\000\002\040\005\000\002" +
    "\020\003\000\002\020\005\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\004\000\002\031\003" +
    "\000\002\031\005\000\002\031\003\000\002\046\006\000" +
    "\002\006\003\000\002\053\006\000\002\053\005\000\002" +
    "\007\003\000\002\007\005\000\002\010\004\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\054\005\000\002\054\003\000" +
    "\002\055\003\000\002\055\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\044\003\000\002\047\003\000\002\050\003" +
    "\000\002\050\003\000\002\051\003\000\002\052\003\000" +
    "\002\014\005\000\002\015\004\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\025\003\000\002\025\003\000\002\056\004" +
    "\000\002\056\004\000\002\056\004\000\002\056\002\000" +
    "\002\024\004\000\002\024\004\000\002\024\004\000\002" +
    "\024\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\014\004\004\005\014\006\005\007\015\010" +
    "\011\001\002\000\006\011\uffbe\037\306\001\002\000\004" +
    "\011\uffbc\001\002\000\004\004\305\001\002\000\016\002" +
    "\000\004\024\005\014\006\005\007\015\010\011\001\002" +
    "\000\004\002\302\001\002\000\004\011\uffba\001\002\000" +
    "\004\011\044\001\002\000\004\013\017\001\002\000\004" +
    "\011\uffbd\001\002\000\004\011\uffbb\001\002\000\006\002" +
    "\ufffa\004\ufffa\001\002\000\036\004\024\005\014\006\005" +
    "\007\015\010\011\011\044\026\030\032\046\033\032\034" +
    "\025\035\021\036\042\043\037\060\026\001\002\000\040" +
    "\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\014" +
    "\uffe4\026\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\043\uffe4\060\uffe4\001\002\000\004\015\265\001\002\000" +
    "\004\063\264\001\002\000\004\011\044\001\002\000\004" +
    "\011\uffbe\001\002\000\032\011\044\015\077\020\054\021" +
    "\066\022\057\023\063\040\061\041\064\042\101\053\120" +
    "\064\114\065\117\001\002\000\004\063\253\001\002\000" +
    "\040\004\024\005\014\006\005\007\015\010\011\011\044" +
    "\014\252\026\030\032\046\033\032\034\025\035\021\036" +
    "\042\043\037\060\026\001\002\000\004\015\234\001\002" +
    "\000\004\063\233\001\002\000\004\013\017\001\002\000" +
    "\004\063\224\001\002\000\040\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\014\ufff7\026\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\035\ufff7\036\ufff7\043\ufff7\060\ufff7\001\002" +
    "\000\040\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\014\ufff5\026\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5" +
    "\036\ufff5\043\ufff5\060\ufff5\001\002\000\004\063\223\001" +
    "\002\000\004\063\222\001\002\000\004\063\221\001\002" +
    "\000\004\063\220\001\002\000\004\015\214\001\002\000" +
    "\040\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\014\ufff4\026\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036" +
    "\ufff4\043\ufff4\060\ufff4\001\002\000\060\012\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\024\uffc4\025\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\061\uffc4\062\uffc4\063\uffc4\064" +
    "\uffc4\065\uffc4\001\002\000\040\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\014\ufff6\026\ufff6\032\ufff6\033" +
    "\ufff6\034\ufff6\035\ufff6\036\ufff6\043\ufff6\060\ufff6\001\002" +
    "\000\004\015\172\001\002\000\012\015\053\017\052\024" +
    "\050\063\uff8d\001\002\000\032\011\044\015\077\020\054" +
    "\021\066\022\057\023\063\040\061\041\064\042\101\053" +
    "\120\064\114\065\117\001\002\000\006\016\uffa9\063\uffa9" +
    "\001\002\000\036\011\044\015\077\020\054\021\066\022" +
    "\057\023\063\035\021\036\042\040\061\041\064\042\101" +
    "\053\120\064\114\065\117\001\002\000\022\011\044\016" +
    "\062\020\054\021\066\022\057\023\063\040\061\041\064" +
    "\001\002\000\046\012\uffb0\016\uffb0\025\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0" +
    "\054\uffb0\055\uffb0\056\uffb0\057\uffb0\061\uffb0\062\uffb0\063" +
    "\uffb0\001\002\000\006\012\uffb8\016\uffb8\001\002\000\006" +
    "\012\074\016\075\001\002\000\046\012\uffac\016\uffac\025" +
    "\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac" +
    "\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac\061" +
    "\uffac\062\uffac\063\uffac\001\002\000\046\012\uffb1\016\uffb1" +
    "\025\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1" +
    "\061\uffb1\062\uffb1\063\uffb1\001\002\000\046\012\uffae\016" +
    "\uffae\025\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae" +
    "\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057" +
    "\uffae\061\uffae\062\uffae\063\uffae\001\002\000\044\016\uffc2" +
    "\025\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\061\uffc2\062\uffc2\063\uffc2\001\002\000\046\012\uffab\016" +
    "\uffab\025\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab" +
    "\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057" +
    "\uffab\061\uffab\062\uffab\063\uffab\001\002\000\046\012\uffad" +
    "\016\uffad\025\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050" +
    "\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad" +
    "\057\uffad\061\uffad\062\uffad\063\uffad\001\002\000\046\012" +
    "\uffb2\016\uffb2\025\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2" +
    "\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056" +
    "\uffb2\057\uffb2\061\uffb2\062\uffb2\063\uffb2\001\002\000\046" +
    "\012\uffaf\016\uffaf\025\uffaf\044\uffaf\045\uffaf\046\uffaf\047" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf" +
    "\056\uffaf\057\uffaf\061\uffaf\062\uffaf\063\uffaf\001\002\000" +
    "\046\012\uffb4\016\uffb4\025\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\061\uffb4\062\uffb4\063\uffb4\001\002" +
    "\000\046\012\uffb5\016\uffb5\025\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\061\uffb5\062\uffb5\063\uffb5\001" +
    "\002\000\006\012\uffb6\016\uffb6\001\002\000\046\012\uffb3" +
    "\016\uffb3\025\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3" +
    "\057\uffb3\061\uffb3\062\uffb3\063\uffb3\001\002\000\006\012" +
    "\uffb7\016\uffb7\001\002\000\020\011\044\020\054\021\066" +
    "\022\057\023\063\040\061\041\064\001\002\000\044\016" +
    "\uffc3\025\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057" +
    "\uffc3\061\uffc3\062\uffc3\063\uffc3\001\002\000\006\012\uffb9" +
    "\016\uffb9\001\002\000\032\011\044\015\077\020\054\021" +
    "\066\022\057\023\063\040\061\041\064\042\101\053\120" +
    "\064\114\065\117\001\002\000\006\016\uff90\063\uff90\001" +
    "\002\000\032\011\044\015\077\020\054\021\066\022\057" +
    "\023\063\040\061\041\064\042\101\053\120\064\114\065" +
    "\117\001\002\000\044\016\uffc8\025\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054" +
    "\uffc8\055\uffc8\056\uffc8\057\uffc8\061\uffc8\062\uffc8\063\uffc8" +
    "\001\002\000\044\016\uffd3\025\uffd3\044\uffd3\045\uffd3\046" +
    "\uffd3\047\uffd3\050\uffd3\051\uffd3\052\160\053\154\054\153" +
    "\055\161\056\157\057\156\061\uffd3\062\uffd3\063\uffd3\001" +
    "\002\000\030\016\uffd8\025\uffd8\044\135\045\142\046\133" +
    "\047\134\050\143\051\141\061\137\062\136\063\uffd8\001" +
    "\002\000\044\016\uffce\025\uffce\044\uffce\045\uffce\046\uffce" +
    "\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055" +
    "\uffce\056\uffce\057\uffce\061\uffce\062\uffce\063\uffce\001\002" +
    "\000\044\016\uffca\025\uffca\044\uffca\045\uffca\046\uffca\047" +
    "\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca" +
    "\056\uffca\057\uffca\061\uffca\062\uffca\063\uffca\001\002\000" +
    "\030\011\044\015\077\020\054\021\066\022\057\023\063" +
    "\040\061\041\064\053\120\064\114\065\117\001\002\000" +
    "\030\016\uffd7\025\uffd7\044\135\045\142\046\133\047\134" +
    "\050\143\051\141\061\137\062\136\063\uffd7\001\002\000" +
    "\044\016\uffd0\025\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0" +
    "\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\125\055\130\056" +
    "\127\057\uffd0\061\uffd0\062\uffd0\063\uffd0\001\002\000\006" +
    "\016\uff8e\063\uff8e\001\002\000\006\016\uff8f\063\uff8f\001" +
    "\002\000\030\011\uff99\015\uff99\020\uff99\021\uff99\022\uff99" +
    "\023\uff99\040\uff99\041\uff99\053\uff99\064\uff99\065\uff99\001" +
    "\002\000\044\016\uffcc\025\uffcc\044\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055" +
    "\uffcc\056\uffcc\057\uffcc\061\uffcc\062\uffcc\063\uffcc\001\002" +
    "\000\044\016\uffc6\025\uffc6\044\uffc6\045\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6" +
    "\056\uffc6\057\uffc6\061\uffc6\062\uffc6\063\uffc6\001\002\000" +
    "\030\011\uff98\015\uff98\020\uff98\021\uff98\022\uff98\023\uff98" +
    "\040\uff98\041\uff98\053\uff98\064\uff98\065\uff98\001\002\000" +
    "\030\011\uff97\015\uff97\020\uff97\021\uff97\022\uff97\023\uff97" +
    "\040\uff97\041\uff97\053\uff97\064\uff97\065\uff97\001\002\000" +
    "\050\015\053\016\uffcb\024\122\025\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054" +
    "\uffcb\055\uffcb\056\uffcb\057\uffcb\061\uffcb\062\uffcb\063\uffcb" +
    "\001\002\000\032\011\044\015\077\020\054\021\066\022" +
    "\057\023\063\040\061\041\064\042\101\053\120\064\114" +
    "\065\117\001\002\000\004\025\124\001\002\000\044\016" +
    "\uffc5\025\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057" +
    "\uffc5\061\uffc5\062\uffc5\063\uffc5\001\002\000\030\011\uffa2" +
    "\015\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\040\uffa2\041" +
    "\uffa2\053\uffa2\064\uffa2\065\uffa2\001\002\000\030\011\044" +
    "\015\077\020\054\021\066\022\057\023\063\040\061\041" +
    "\064\053\120\064\114\065\117\001\002\000\030\011\uffa1" +
    "\015\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\040\uffa1\041" +
    "\uffa1\053\uffa1\064\uffa1\065\uffa1\001\002\000\030\011\uffa0" +
    "\015\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\040\uffa0\041" +
    "\uffa0\053\uffa0\064\uffa0\065\uffa0\001\002\000\044\016\uffcd" +
    "\025\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd" +
    "\061\uffcd\062\uffcd\063\uffcd\001\002\000\032\011\044\015" +
    "\077\020\054\021\066\022\057\023\063\040\061\041\064" +
    "\042\101\053\120\064\114\065\117\001\002\000\032\011" +
    "\uff9d\015\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\040\uff9d" +
    "\041\uff9d\042\uff9d\053\uff9d\064\uff9d\065\uff9d\001\002\000" +
    "\032\011\uff9c\015\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c" +
    "\040\uff9c\041\uff9c\042\uff9c\053\uff9c\064\uff9c\065\uff9c\001" +
    "\002\000\032\011\uff9f\015\uff9f\020\uff9f\021\uff9f\022\uff9f" +
    "\023\uff9f\040\uff9f\041\uff9f\042\uff9f\053\uff9f\064\uff9f\065" +
    "\uff9f\001\002\000\032\011\uff95\015\uff95\020\uff95\021\uff95" +
    "\022\uff95\023\uff95\040\uff95\041\uff95\042\uff95\053\uff95\064" +
    "\uff95\065\uff95\001\002\000\032\011\uff96\015\uff96\020\uff96" +
    "\021\uff96\022\uff96\023\uff96\040\uff96\041\uff96\042\uff96\053" +
    "\uff96\064\uff96\065\uff96\001\002\000\032\011\044\015\077" +
    "\020\054\021\066\022\057\023\063\040\061\041\064\042" +
    "\101\053\120\064\114\065\117\001\002\000\032\011\uff9a" +
    "\015\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\040\uff9a\041" +
    "\uff9a\042\uff9a\053\uff9a\064\uff9a\065\uff9a\001\002\000\032" +
    "\011\uff9e\015\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\040" +
    "\uff9e\041\uff9e\042\uff9e\053\uff9e\064\uff9e\065\uff9e\001\002" +
    "\000\032\011\uff9b\015\uff9b\020\uff9b\021\uff9b\022\uff9b\023" +
    "\uff9b\040\uff9b\041\uff9b\042\uff9b\053\uff9b\064\uff9b\065\uff9b" +
    "\001\002\000\030\016\uffd5\025\uffd5\044\uffd5\045\uffd5\046" +
    "\uffd5\047\uffd5\050\uffd5\051\uffd5\061\137\062\136\063\uffd5" +
    "\001\002\000\030\016\uffd2\025\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\061\137\062\136\063\uffd2" +
    "\001\002\000\044\016\uffc9\025\uffc9\044\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9" +
    "\055\uffc9\056\uffc9\057\uffc9\061\uffc9\062\uffc9\063\uffc9\001" +
    "\002\000\032\011\044\015\077\020\054\021\066\022\057" +
    "\023\063\040\061\041\064\042\101\053\120\064\114\065" +
    "\117\001\002\000\032\011\044\015\077\020\054\021\066" +
    "\022\057\023\063\040\061\041\064\042\101\053\120\064" +
    "\114\065\117\001\002\000\030\016\uffd4\025\uffd4\044\135" +
    "\045\142\046\133\047\134\050\143\051\141\061\137\062" +
    "\136\063\uffd4\001\002\000\030\016\uffd6\025\uffd6\044\135" +
    "\045\142\046\133\047\134\050\143\051\141\061\137\062" +
    "\136\063\uffd6\001\002\000\030\011\uffa5\015\uffa5\020\uffa5" +
    "\021\uffa5\022\uffa5\023\uffa5\040\uffa5\041\uffa5\053\uffa5\064" +
    "\uffa5\065\uffa5\001\002\000\030\011\uffa7\015\uffa7\020\uffa7" +
    "\021\uffa7\022\uffa7\023\uffa7\040\uffa7\041\uffa7\053\uffa7\064" +
    "\uffa7\065\uffa7\001\002\000\030\011\044\015\077\020\054" +
    "\021\066\022\057\023\063\040\061\041\064\053\120\064" +
    "\114\065\117\001\002\000\030\011\uffa6\015\uffa6\020\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\040\uffa6\041\uffa6\053\uffa6\064" +
    "\uffa6\065\uffa6\001\002\000\030\011\uffa4\015\uffa4\020\uffa4" +
    "\021\uffa4\022\uffa4\023\uffa4\040\uffa4\041\uffa4\053\uffa4\064" +
    "\uffa4\065\uffa4\001\002\000\030\011\uffa8\015\uffa8\020\uffa8" +
    "\021\uffa8\022\uffa8\023\uffa8\040\uffa8\041\uffa8\053\uffa8\064" +
    "\uffa8\065\uffa8\001\002\000\030\011\uffa3\015\uffa3\020\uffa3" +
    "\021\uffa3\022\uffa3\023\uffa3\040\uffa3\041\uffa3\053\uffa3\064" +
    "\uffa3\065\uffa3\001\002\000\044\016\uffcf\025\uffcf\044\uffcf" +
    "\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053" +
    "\uffcf\054\125\055\130\056\127\057\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\001\002\000\030\016\uffd1\025\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\061\137\062\136" +
    "\063\uffd1\001\002\000\004\016\165\001\002\000\044\016" +
    "\uffc7\025\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057" +
    "\uffc7\061\uffc7\062\uffc7\063\uffc7\001\002\000\004\025\167" +
    "\001\002\000\004\017\170\001\002\000\032\011\044\015" +
    "\077\020\054\021\066\022\057\023\063\040\061\041\064" +
    "\042\101\053\120\064\114\065\117\001\002\000\004\063" +
    "\ufff3\001\002\000\004\011\044\001\002\000\006\017\052" +
    "\063\uff8d\001\002\000\004\016\212\001\002\000\004\063" +
    "\176\001\002\000\032\011\044\015\077\020\054\021\066" +
    "\022\057\023\063\040\061\041\064\042\101\053\120\064" +
    "\114\065\117\001\002\000\024\044\135\045\142\046\133" +
    "\047\134\050\143\051\141\061\137\062\136\063\200\001" +
    "\002\000\010\011\044\064\204\065\201\001\002\000\004" +
    "\011\044\001\002\000\012\016\uff8d\017\052\064\210\065" +
    "\207\001\002\000\004\016\uffed\001\002\000\004\011\044" +
    "\001\002\000\004\016\uffe7\001\002\000\004\016\uffeb\001" +
    "\002\000\004\016\uffe8\001\002\000\004\016\uffe9\001\002" +
    "\000\004\016\uffea\001\002\000\004\013\017\001\002\000" +
    "\040\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\014\uffee\026\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036" +
    "\uffee\043\uffee\060\uffee\001\002\000\006\011\044\016\216" +
    "\001\002\000\004\016\217\001\002\000\006\016\uffda\063" +
    "\uffda\001\002\000\006\016\uffd9\063\uffd9\001\002\000\040" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\014" +
    "\uffe3\026\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\043\uffe3\060\uffe3\001\002\000\040\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\014\uffe2\026\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\043\uffe2\060\uffe2\001" +
    "\002\000\040\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\014\uffde\026\uffde\032\uffde\033\uffde\034\uffde\035" +
    "\uffde\036\uffde\043\uffde\060\uffde\001\002\000\040\004\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\014\uffe0\026" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\043\uffe0" +
    "\060\uffe0\001\002\000\040\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\014\uffe6\026\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\043\uffe6\060\uffe6\001\002\000" +
    "\004\031\226\001\002\000\004\015\227\001\002\000\032" +
    "\011\044\015\077\020\054\021\066\022\057\023\063\040" +
    "\061\041\064\042\101\053\120\064\114\065\117\001\002" +
    "\000\024\016\231\044\135\045\142\046\133\047\134\050" +
    "\143\051\141\061\137\062\136\001\002\000\004\063\232" +
    "\001\002\000\040\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\014\uffec\026\uffec\032\uffec\033\uffec\034\uffec" +
    "\035\uffec\036\uffec\043\uffec\060\uffec\001\002\000\040\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\014\uffe5" +
    "\026\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\043" +
    "\uffe5\060\uffe5\001\002\000\032\011\044\015\077\020\054" +
    "\021\066\022\057\023\063\040\061\041\064\042\101\053" +
    "\120\064\114\065\117\001\002\000\024\016\236\044\135" +
    "\045\142\046\133\047\134\050\143\051\141\061\137\062" +
    "\136\001\002\000\004\013\017\001\002\000\044\004\uffef" +
    "\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\014\uffef\026" +
    "\uffef\027\241\030\240\032\uffef\033\uffef\034\uffef\035\uffef" +
    "\036\uffef\043\uffef\060\uffef\001\002\000\004\013\017\001" +
    "\002\000\004\015\243\001\002\000\040\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\011\ufff2\014\ufff2\026\ufff2\032" +
    "\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\043\ufff2\060\ufff2" +
    "\001\002\000\032\011\044\015\077\020\054\021\066\022" +
    "\057\023\063\040\061\041\064\042\101\053\120\064\114" +
    "\065\117\001\002\000\024\016\245\044\135\045\142\046" +
    "\133\047\134\050\143\051\141\061\137\062\136\001\002" +
    "\000\004\013\017\001\002\000\044\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\010\uffef\011\uffef\014\uffef\026\uffef\027\241" +
    "\030\240\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\043" +
    "\uffef\060\uffef\001\002\000\040\004\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\014\ufff1\026\ufff1\032\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\043\ufff1\060\ufff1\001\002" +
    "\000\040\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\014\ufff0\026\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0" +
    "\036\ufff0\043\ufff0\060\ufff0\001\002\000\040\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\014\ufff8\026\ufff8" +
    "\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\043\ufff8\060" +
    "\ufff8\001\002\000\050\002\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\014\ufffb\026\ufffb\027\ufffb\030" +
    "\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb" +
    "\043\ufffb\060\ufffb\001\002\000\040\004\uffdd\005\uffdd\006" +
    "\uffdd\007\uffdd\010\uffdd\011\uffdd\014\uffdd\026\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\043\uffdd\060\uffdd\001" +
    "\002\000\004\063\255\001\002\000\040\004\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\011\uffdf\014\uffdf\026\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\043\uffdf\060\uffdf" +
    "\001\002\000\006\017\257\063\uff91\001\002\000\036\011" +
    "\044\015\077\020\054\021\066\022\057\023\063\035\021" +
    "\036\042\040\061\041\064\042\101\053\120\064\114\065" +
    "\117\001\002\000\004\063\uffaa\001\002\000\004\063\uff94" +
    "\001\002\000\004\063\uff92\001\002\000\004\063\uff93\001" +
    "\002\000\040\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\014\uffe1\026\uffe1\032\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\043\uffe1\060\uffe1\001\002\000\006\011\044" +
    "\016\267\001\002\000\004\016\270\001\002\000\006\016" +
    "\uffdc\063\uffdc\001\002\000\006\016\uffdb\063\uffdb\001\002" +
    "\000\004\015\272\001\002\000\014\004\024\005\014\006" +
    "\005\007\015\010\011\001\002\000\006\012\277\016\300" +
    "\001\002\000\004\011\044\001\002\000\006\012\uffc1\016" +
    "\uffc1\001\002\000\006\012\uffbf\016\uffbf\001\002\000\014" +
    "\004\024\005\014\006\005\007\015\010\011\001\002\000" +
    "\004\013\ufff9\001\002\000\006\012\uffc0\016\uffc0\001\002" +
    "\000\004\002\001\001\002\000\004\002\uffff\001\002\000" +
    "\016\002\ufffe\004\024\005\014\006\005\007\015\010\011" +
    "\001\002\000\004\037\306\001\002\000\004\015\307\001" +
    "\002\000\004\016\310\001\002\000\004\013\017\001\002" +
    "\000\016\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\014\002\007\003\005\004\012\005\011\033" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\303\001\001\000\010\003\302\004\012\005\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\270" +
    "\001\001\000\004\011\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\005\022\006\046" +
    "\012\026\013\033\014\032\015\030\016\017\017\044\026" +
    "\042\032\034\034\040\035\037\053\035\057\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\255\001\001\000\002\001\001\000\044\006\120" +
    "\020\110\021\107\022\103\031\104\036\253\037\101\040" +
    "\102\041\106\043\114\044\067\046\115\047\066\050\071" +
    "\051\064\052\057\053\105\001\001\000\002\001\001\000" +
    "\034\005\022\006\046\013\250\014\032\015\030\016\017" +
    "\017\044\026\042\032\034\034\040\035\037\053\035\057" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\050\001\001\000\044\006\120\020\110\021" +
    "\107\022\103\031\104\036\165\037\101\040\102\041\106" +
    "\043\114\044\067\046\115\047\066\050\071\051\064\052" +
    "\057\053\105\001\001\000\002\001\001\000\050\006\120" +
    "\020\110\021\107\022\103\031\104\034\112\035\111\036" +
    "\077\037\101\040\102\041\106\043\114\044\067\046\115" +
    "\047\066\050\071\051\064\052\057\053\105\001\001\000" +
    "\024\006\072\043\070\044\067\047\066\050\071\051\064" +
    "\052\057\054\055\055\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\006\072\043\070" +
    "\044\067\047\066\050\071\051\064\052\057\055\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\006\120" +
    "\020\110\021\107\022\103\031\104\036\163\037\101\040" +
    "\102\041\106\043\114\044\067\046\115\047\066\050\071" +
    "\051\064\052\057\053\105\001\001\000\002\001\001\000" +
    "\040\006\120\020\110\021\162\031\104\037\101\040\102" +
    "\041\106\043\114\044\067\046\115\047\066\050\071\051" +
    "\064\052\057\053\105\001\001\000\002\001\001\000\004" +
    "\042\154\001\001\000\006\025\146\060\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\006\120\031\145" +
    "\037\101\041\106\043\114\044\067\046\115\047\066\050" +
    "\071\051\064\052\057\053\105\001\001\000\006\025\131" +
    "\060\137\001\001\000\004\023\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\006\120\020\110\021\107\022\103" +
    "\031\104\036\122\037\101\040\102\041\106\043\114\044" +
    "\067\046\115\047\066\050\071\051\064\052\057\053\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\006\120\031\130\037\101\041\106\043\114" +
    "\044\067\046\115\047\066\050\071\051\064\052\057\053" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\006\120\020\110\021\144\031\104\037" +
    "\101\040\102\041\106\043\114\044\067\046\115\047\066" +
    "\050\071\051\064\052\057\053\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\006\120\020\110\021\143\031" +
    "\104\037\101\040\102\041\106\043\114\044\067\046\115" +
    "\047\066\050\071\051\064\052\057\053\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\131\001\001\000\004\025\131\001\001\000\002\001" +
    "\001\000\042\006\120\020\110\021\107\022\151\031\104" +
    "\037\101\040\102\041\106\043\114\044\067\046\115\047" +
    "\066\050\071\051\064\052\057\053\105\001\001\000\042" +
    "\006\120\020\110\021\107\022\150\031\104\037\101\040" +
    "\102\041\106\043\114\044\067\046\115\047\066\050\071" +
    "\051\064\052\057\053\105\001\001\000\006\025\146\060" +
    "\147\001\001\000\006\025\146\060\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\006\120\020\161\031" +
    "\104\037\101\041\106\043\114\044\067\046\115\047\066" +
    "\050\071\051\064\052\057\053\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\125\001\001\000\004\025\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\006\120\020\110\021\107\022\103\031" +
    "\104\036\170\037\101\040\102\041\106\043\114\044\067" +
    "\046\115\047\066\050\071\051\064\052\057\053\105\001" +
    "\001\000\002\001\001\000\010\006\172\015\174\030\173" +
    "\001\001\000\004\024\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\006\120\020\110\021\107\022\176" +
    "\031\104\037\101\040\102\041\106\043\114\044\067\046" +
    "\115\047\066\050\071\051\064\052\057\053\105\001\001" +
    "\000\006\025\146\060\147\001\001\000\010\006\201\015" +
    "\204\027\202\001\001\000\004\006\210\001\001\000\004" +
    "\024\050\001\001\000\002\001\001\000\004\006\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\212\001" +
    "\001\000\002\001\001\000\004\006\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\006\120\020\110\021\107\022\227\031\104\037\101" +
    "\040\102\041\106\043\114\044\067\046\115\047\066\050" +
    "\071\051\064\052\057\053\105\001\001\000\006\025\146" +
    "\060\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\006\120\020\110\021\107\022\234" +
    "\031\104\037\101\040\102\041\106\043\114\044\067\046" +
    "\115\047\066\050\071\051\064\052\057\053\105\001\001" +
    "\000\006\025\146\060\147\001\001\000\004\011\236\001" +
    "\001\000\004\045\241\001\001\000\004\011\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\006\120\020" +
    "\110\021\107\022\243\031\104\037\101\040\102\041\106" +
    "\043\114\044\067\046\115\047\066\050\071\051\064\052" +
    "\057\053\105\001\001\000\006\025\146\060\147\001\001" +
    "\000\004\011\245\001\001\000\004\045\246\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\257\001\001\000\050\006\120\020\110" +
    "\021\107\022\103\031\104\034\262\035\261\036\260\037" +
    "\101\040\102\041\106\043\114\044\067\046\115\047\066" +
    "\050\071\051\064\052\057\053\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\273\007\272\010\274\001\001\000\002\001" +
    "\001\000\004\006\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\273\010\300\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\311\004\012\005\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\310" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    // Método que se invoca cuando ocurre un error de sintaxis
    public void syntax_error(Symbol s){
        this.s = s;
        System.err.println("Error de sintaxis en la línea " + s.left + ", columna " + s.right + ": se encontró " + s.value);
    }

    // Devuelve el símbolo actual
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // asignacion_opcional ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_opcional",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // asignacion_opcional ::= IGUAL escritura 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_opcional",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // asignacion_opcional ::= IGUAL lectura 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_opcional",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // asignacion_opcional ::= IGUAL expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_opcional",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // declaracion_opcional ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_opcional",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // declaracion_opcional ::= IGUAL escritura 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_opcional",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // declaracion_opcional ::= IGUAL lectura 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_opcional",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // declaracion_opcional ::= IGUAL expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_opcional",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operador_logico ::= DISYUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_logico",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operador_logico ::= CONJUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_logico",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operador_unario ::= RESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_unario",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operador_unario ::= DECREMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_unario",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operador_unario ::= INCREMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_unario",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operador_relacional ::= DIFERENTES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operador_relacional ::= IGUALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operador_relacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operador_relacional ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operador_relacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operador_relacional ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // op_mult ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_mult",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // op_mult ::= MODULO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_mult",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // op_mult ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_mult",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operador_binario ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_binario",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operador_binario ::= MODULO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_binario",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operador_binario ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_binario",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operador_binario ::= POTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_binario",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operador_binario ::= RESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_binario",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operador_binario ::= SUMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_binario",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // asignacion ::= identificador asignacion_opcional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // declaracion ::= tipo identificador declaracion_opcional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // literal_string ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_string",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // literal_char ::= LITERAL_CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_char",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // literal_bool ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_bool",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // literal_bool ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_bool",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // literal_float ::= LITERAL_FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_float",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // literal_int ::= LITERAL_INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_int",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // literal ::= literal_string 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // literal ::= literal_char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literal ::= literal_bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // literal ::= literal_float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // literal ::= literal_int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // paramInv ::= literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramInv",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // paramInv ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramInv",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametrosInv ::= paramInv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametrosInv",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametrosInv ::= parametrosInv COMA paramInv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametrosInv",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // param ::= tipo identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("param",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametros ::= parametros COMA param 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametros ::= param 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // llamada_funcion ::= identificador PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("llamada_funcion",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // llamada_funcion ::= identificador PARENTESIS_ABIERTO parametrosInv PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("llamada_funcion",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // identificador ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("identificador",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // array_expr ::= identificador CORCHETE_ABIERTO expresion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("array_expr",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= array_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= expresion_unaria 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= operador_unario factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term ::= term op_mult factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("term",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // term ::= factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("term",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion_binaria ::= expresion_binaria operador_binario term 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_binaria",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion_binaria ::= term 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_binaria",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion_logica ::= NEGACION expresion_logica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion_logica ::= expresion_logica operador_logico expresion_logica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion_logica ::= expresion_binaria 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion_relacional ::= expresion_relacional operador_relacional expresion_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion_relacional ::= expresion_logica operador_relacional expresion_logica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion_relacional ::= expresion_relacional operador_logico expresion_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion_relacional ::= expresion_logica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expresion_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // escritura ::= PRINT PARENTESIS_ABIERTO identificador PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("escritura",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // escritura ::= PRINT PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("escritura",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lectura ::= READ PARENTESIS_ABIERTO identificador PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lectura",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lectura ::= READ PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lectura",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= ERROR DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= BREAK DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= RETURN expresion DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= llamada_funcion DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= asignacion_arreglo DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= escritura DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= lectura DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= estructura_control 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= asignacion DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= declaracion DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inc_for ::= asignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inc_for",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inc_for ::= identificador DECREMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inc_for",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inc_for ::= identificador INCREMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inc_for",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inc_for ::= DECREMENTO identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inc_for",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inc_for ::= INCREMENTO identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inc_for",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion_do_while ::= DO cuerpo_funcion WHILE PARENTESIS_ABIERTO expresion_relacional PARENTESIS_CERRADO DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_do_while",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // condicion_for ::= asignacion DOLAR expresion_relacional DOLAR inc_for 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_for",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion_for ::= FOR PARENTESIS_ABIERTO condicion_for PARENTESIS_CERRADO cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // else_parte ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("else_parte",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // else_parte ::= ELSE cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("else_parte",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // else_parte ::= ELIF PARENTESIS_ABIERTO expresion_relacional PARENTESIS_CERRADO cuerpo_funcion else_parte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("else_parte",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion_if ::= IF PARENTESIS_ABIERTO expresion_relacional PARENTESIS_CERRADO cuerpo_funcion else_parte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_if",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // asignacion_arreglo ::= identificador CORCHETE_ABIERTO expresion CORCHETE_CERRADO IGUAL expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // estructura_control ::= declaracion_for 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_control",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // estructura_control ::= declaracion_do_while 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_control",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // estructura_control ::= declaracion_if 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_control",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloque ::= sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloque ::= bloque sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nombre_funcion ::= tipo identificador PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nombre_funcion",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= nombre_funcion cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funcion",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo_funcion ::= LLAVE_ABIERTA bloque LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main ::= INT MAIN PARENTESIS_ABIERTO PARENTESIS_CERRADO cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("main",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= funcion main funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= funcion main 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= main funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= main 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

