
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Apr 19 12:14:06 CST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Apr 19 12:14:06 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\004\000\002\002\005\000\002\031\007" +
    "\000\002\011\005\000\002\003\004\000\002\004\007\000" +
    "\002\012\004\000\002\012\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\055\007\000\002\056" +
    "\011\000\002\017\007\000\002\044\010\000\002\044\004" +
    "\000\002\044\002\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\004\000\002\013\004\000\002" +
    "\013\003\000\002\013\004\000\002\013\005\000\002\013" +
    "\004\000\002\032\006\000\002\033\006\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\005\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\006\003\000\002\051" +
    "\006\000\002\051\005\000\002\007\003\000\002\007\005" +
    "\000\002\010\004\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\052\005\000\002\052\003\000\002\053\003\000\002\053" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\043\003\000" +
    "\002\045\003\000\002\046\003\000\002\046\003\000\002" +
    "\047\003\000\002\050\003\000\002\054\007\000\002\054" +
    "\007\000\002\014\006\000\002\015\006\000\002\036\005" +
    "\000\002\035\004\000\002\021\005\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\020\004\000\002\020\005\000\002" +
    "\020\005\000\002\024\003\000\002\023\003\000\002\023" +
    "\003\000\002\022\004\000\002\022\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\014\004\004\005\015\006\005\007\014\010" +
    "\011\001\002\000\006\011\uffd3\040\250\001\002\000\004" +
    "\011\uffd1\001\002\000\004\004\247\001\002\000\016\002" +
    "\000\004\024\005\015\006\005\007\014\010\011\001\002" +
    "\000\004\002\244\001\002\000\004\011\uffcf\001\002\000" +
    "\004\011\042\001\002\000\004\013\017\001\002\000\004" +
    "\011\uffd0\001\002\000\004\011\uffd2\001\002\000\006\002" +
    "\ufffa\004\ufffa\001\002\000\030\004\024\005\015\006\005" +
    "\007\014\010\011\011\042\027\027\035\025\036\021\037" +
    "\040\044\035\001\002\000\032\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\014\uffeb\027\uffeb\035\uffeb\036" +
    "\uffeb\037\uffeb\044\uffeb\001\002\000\004\015\230\001\002" +
    "\000\032\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\014\uffe8\027\uffe8\035\uffe8\036\uffe8\037\uffe8\044\uffe8" +
    "\001\002\000\004\011\042\001\002\000\004\011\uffd3\001" +
    "\002\000\034\004\076\007\077\011\042\015\073\021\050" +
    "\022\061\023\053\024\057\041\055\042\060\054\112\066" +
    "\106\067\110\001\002\000\032\004\024\005\015\006\005" +
    "\007\014\010\011\011\042\014\220\027\027\035\025\036" +
    "\021\037\040\044\035\001\002\000\004\015\167\001\002" +
    "\000\032\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\014\uffec\027\uffec\035\uffec\036\uffec\037\uffec\044\uffec" +
    "\001\002\000\032\004\uffed\005\uffed\006\uffed\007\uffed\010" +
    "\uffed\011\uffed\014\uffed\027\uffed\035\uffed\036\uffed\037\uffed" +
    "\044\uffed\001\002\000\032\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\014\ufff7\027\ufff7\035\ufff7\036\ufff7" +
    "\037\ufff7\044\ufff7\001\002\000\032\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\014\ufff5\027\ufff5\035\ufff5" +
    "\036\ufff5\037\ufff5\044\ufff5\001\002\000\004\064\166\001" +
    "\002\000\004\064\165\001\002\000\004\064\164\001\002" +
    "\000\004\064\163\001\002\000\004\015\160\001\002\000" +
    "\032\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\014\ufff4\027\ufff4\035\ufff4\036\ufff4\037\ufff4\044\ufff4\001" +
    "\002\000\054\012\uffd9\015\uffd9\016\uffd9\020\uffd9\025\uffd9" +
    "\026\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052" +
    "\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9" +
    "\062\uffd9\063\uffd9\064\uffd9\001\002\000\032\004\ufff6\005" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\014\ufff6\027\ufff6" +
    "\035\ufff6\036\ufff6\037\ufff6\044\ufff6\001\002\000\010\015" +
    "\047\020\046\025\045\001\002\000\034\004\076\007\077" +
    "\011\042\015\073\021\050\022\061\023\053\024\057\041" +
    "\055\042\060\054\112\066\106\067\110\001\002\000\034" +
    "\004\076\007\077\011\042\015\073\021\050\022\061\023" +
    "\053\024\057\041\055\042\060\054\112\066\106\067\110" +
    "\001\002\000\022\011\042\016\056\021\050\022\061\023" +
    "\053\024\057\041\055\042\060\001\002\000\046\012\uffc5" +
    "\016\uffc5\026\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051" +
    "\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5" +
    "\060\uffc5\062\uffc5\063\uffc5\064\uffc5\001\002\000\006\012" +
    "\070\016\071\001\002\000\006\012\uffcd\016\uffcd\001\002" +
    "\000\046\012\uffc1\016\uffc1\026\uffc1\045\uffc1\046\uffc1\047" +
    "\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1" +
    "\056\uffc1\057\uffc1\060\uffc1\062\uffc1\063\uffc1\064\uffc1\001" +
    "\002\000\046\012\uffc6\016\uffc6\026\uffc6\045\uffc6\046\uffc6" +
    "\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055" +
    "\uffc6\056\uffc6\057\uffc6\060\uffc6\062\uffc6\063\uffc6\064\uffc6" +
    "\001\002\000\046\012\uffc3\016\uffc3\026\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3" +
    "\055\uffc3\056\uffc3\057\uffc3\060\uffc3\062\uffc3\063\uffc3\064" +
    "\uffc3\001\002\000\044\016\uffd7\026\uffd7\045\uffd7\046\uffd7" +
    "\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055" +
    "\uffd7\056\uffd7\057\uffd7\060\uffd7\062\uffd7\063\uffd7\064\uffd7" +
    "\001\002\000\046\012\uffc0\016\uffc0\026\uffc0\045\uffc0\046" +
    "\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0" +
    "\055\uffc0\056\uffc0\057\uffc0\060\uffc0\062\uffc0\063\uffc0\064" +
    "\uffc0\001\002\000\046\012\uffc2\016\uffc2\026\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054" +
    "\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\062\uffc2\063\uffc2" +
    "\064\uffc2\001\002\000\046\012\uffc4\016\uffc4\026\uffc4\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\062\uffc4\063" +
    "\uffc4\064\uffc4\001\002\000\046\012\uffc9\016\uffc9\026\uffc9" +
    "\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053" +
    "\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\062\uffc9" +
    "\063\uffc9\064\uffc9\001\002\000\046\012\uffc7\016\uffc7\026" +
    "\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\062" +
    "\uffc7\063\uffc7\064\uffc7\001\002\000\046\012\uffca\016\uffca" +
    "\026\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052" +
    "\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca" +
    "\062\uffca\063\uffca\064\uffca\001\002\000\006\012\uffcb\016" +
    "\uffcb\001\002\000\046\012\uffc8\016\uffc8\026\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054" +
    "\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\062\uffc8\063\uffc8" +
    "\064\uffc8\001\002\000\006\012\uffcc\016\uffcc\001\002\000" +
    "\020\011\042\021\050\022\061\023\053\024\057\041\055" +
    "\042\060\001\002\000\044\016\uffd8\026\uffd8\045\uffd8\046" +
    "\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8" +
    "\055\uffd8\056\uffd8\057\uffd8\060\uffd8\062\uffd8\063\uffd8\064" +
    "\uffd8\001\002\000\006\012\uffce\016\uffce\001\002\000\034" +
    "\004\076\007\077\011\042\015\073\021\050\022\061\023" +
    "\053\024\057\041\055\042\060\054\112\066\106\067\110" +
    "\001\002\000\044\016\uffdc\026\uffdc\045\uffdc\046\uffdc\047" +
    "\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc" +
    "\056\uffdc\057\uffdc\060\uffdc\062\uffdc\063\uffdc\064\uffdc\001" +
    "\002\000\044\016\uffda\026\uffda\045\uffda\046\uffda\047\uffda" +
    "\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056" +
    "\uffda\057\uffda\060\uffda\062\uffda\063\uffda\064\uffda\001\002" +
    "\000\004\011\042\001\002\000\004\011\042\001\002\000" +
    "\034\045\123\046\132\047\116\050\120\051\133\052\130" +
    "\053\117\054\131\055\121\056\127\057\124\060\115\064" +
    "\140\001\002\000\044\016\uffe0\026\uffe0\045\uffe0\046\uffe0" +
    "\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055" +
    "\uffe0\056\uffe0\057\uffe0\060\uffe0\062\uffe0\063\uffe0\064\uffe0" +
    "\001\002\000\044\016\uffdf\026\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf" +
    "\056\uffdf\057\uffdf\060\uffdf\062\uffdf\063\uffdf\064\uffdf\001" +
    "\002\000\044\016\uffde\026\uffde\045\uffde\046\uffde\047\uffde" +
    "\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056" +
    "\uffde\057\uffde\060\uffde\062\uffde\063\uffde\064\uffde\001\002" +
    "\000\034\004\076\007\077\011\042\015\073\021\050\022" +
    "\061\023\053\024\057\041\055\042\060\054\112\066\106" +
    "\067\110\001\002\000\044\016\uffdb\026\uffdb\045\uffdb\046" +
    "\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb" +
    "\055\uffdb\056\uffdb\057\uffdb\060\uffdb\062\uffdb\063\uffdb\064" +
    "\uffdb\001\002\000\034\004\uffac\007\uffac\011\uffac\015\uffac" +
    "\021\uffac\022\uffac\023\uffac\024\uffac\041\uffac\042\uffac\054" +
    "\uffac\066\uffac\067\uffac\001\002\000\044\016\uffe1\026\uffe1" +
    "\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053" +
    "\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\062\uffe1" +
    "\063\uffe1\064\uffe1\001\002\000\034\004\uffab\007\uffab\011" +
    "\uffab\015\uffab\021\uffab\022\uffab\023\uffab\024\uffab\041\uffab" +
    "\042\uffab\054\uffab\066\uffab\067\uffab\001\002\000\050\015" +
    "\047\016\uffe2\025\113\026\uffe2\045\uffe2\046\uffe2\047\uffe2" +
    "\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056" +
    "\uffe2\057\uffe2\060\uffe2\062\uffe2\063\uffe2\064\uffe2\001\002" +
    "\000\034\004\uffaa\007\uffaa\011\uffaa\015\uffaa\021\uffaa\022" +
    "\uffaa\023\uffaa\024\uffaa\041\uffaa\042\uffaa\054\uffaa\066\uffaa" +
    "\067\uffaa\001\002\000\034\004\076\007\077\011\042\015" +
    "\073\021\050\022\061\023\053\024\057\041\055\042\060" +
    "\054\112\066\106\067\110\001\002\000\034\026\122\045" +
    "\123\046\132\047\116\050\120\051\133\052\130\053\117" +
    "\054\131\055\121\056\127\057\124\060\115\001\002\000" +
    "\034\004\uffb6\007\uffb6\011\uffb6\015\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\024\uffb6\041\uffb6\042\uffb6\054\uffb6\066\uffb6\067" +
    "\uffb6\001\002\000\034\004\uffb0\007\uffb0\011\uffb0\015\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\041\uffb0\042\uffb0\054" +
    "\uffb0\066\uffb0\067\uffb0\001\002\000\034\004\uffb8\007\uffb8" +
    "\011\uffb8\015\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\041" +
    "\uffb8\042\uffb8\054\uffb8\066\uffb8\067\uffb8\001\002\000\034" +
    "\004\uffaf\007\uffaf\011\uffaf\015\uffaf\021\uffaf\022\uffaf\023" +
    "\uffaf\024\uffaf\041\uffaf\042\uffaf\054\uffaf\066\uffaf\067\uffaf" +
    "\001\002\000\034\004\uffb5\007\uffb5\011\uffb5\015\uffb5\021" +
    "\uffb5\022\uffb5\023\uffb5\024\uffb5\041\uffb5\042\uffb5\054\uffb5" +
    "\066\uffb5\067\uffb5\001\002\000\004\064\136\001\002\000" +
    "\034\004\uffb2\007\uffb2\011\uffb2\015\uffb2\021\uffb2\022\uffb2" +
    "\023\uffb2\024\uffb2\041\uffb2\042\uffb2\054\uffb2\066\uffb2\067" +
    "\uffb2\001\002\000\034\004\uffb4\007\uffb4\011\uffb4\015\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\041\uffb4\042\uffb4\054" +
    "\uffb4\066\uffb4\067\uffb4\001\002\000\034\004\076\007\077" +
    "\011\042\015\073\021\050\022\061\023\053\024\057\041" +
    "\055\042\060\054\112\066\106\067\110\001\002\000\034" +
    "\004\076\007\077\011\042\015\073\021\050\022\061\023" +
    "\053\024\057\041\055\042\060\054\112\066\106\067\110" +
    "\001\002\000\034\004\uffb3\007\uffb3\011\uffb3\015\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\041\uffb3\042\uffb3\054\uffb3" +
    "\066\uffb3\067\uffb3\001\002\000\034\004\uffad\007\uffad\011" +
    "\uffad\015\uffad\021\uffad\022\uffad\023\uffad\024\uffad\041\uffad" +
    "\042\uffad\054\uffad\066\uffad\067\uffad\001\002\000\034\004" +
    "\uffb7\007\uffb7\011\uffb7\015\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\041\uffb7\042\uffb7\054\uffb7\066\uffb7\067\uffb7\001" +
    "\002\000\034\004\uffb1\007\uffb1\011\uffb1\015\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\041\uffb1\042\uffb1\054\uffb1\066" +
    "\uffb1\067\uffb1\001\002\000\034\004\uffae\007\uffae\011\uffae" +
    "\015\uffae\021\uffae\022\uffae\023\uffae\024\uffae\041\uffae\042" +
    "\uffae\054\uffae\066\uffae\067\uffae\001\002\000\044\016\uffb9" +
    "\026\uffb9\045\123\046\132\047\116\050\120\051\133\052" +
    "\130\053\117\054\131\055\121\056\127\057\124\060\115" +
    "\062\uffb9\063\uffb9\064\uffb9\001\002\000\044\016\uffbb\026" +
    "\uffbb\045\123\046\132\047\116\050\120\051\133\052\130" +
    "\053\117\054\131\055\121\056\127\057\124\060\115\062" +
    "\uffbb\063\uffbb\064\uffbb\001\002\000\044\016\ufff3\026\ufff3" +
    "\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053" +
    "\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\062\ufff3" +
    "\063\ufff3\064\ufff3\001\002\000\044\016\uffba\026\uffba\045" +
    "\123\046\132\047\116\050\120\051\133\052\130\053\117" +
    "\054\131\055\121\056\127\057\124\060\115\062\uffba\063" +
    "\uffba\064\uffba\001\002\000\032\004\uffbc\005\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\011\uffbc\014\uffbc\027\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\044\uffbc\001\002\000\004\025\142\001\002" +
    "\000\004\065\143\001\002\000\004\026\144\001\002\000" +
    "\044\016\uffbe\026\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057" +
    "\uffbe\060\uffbe\062\uffbe\063\uffbe\064\uffbe\001\002\000\004" +
    "\025\146\001\002\000\004\065\147\001\002\000\004\026" +
    "\150\001\002\000\044\016\uffbf\026\uffbf\045\uffbf\046\uffbf" +
    "\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055" +
    "\uffbf\056\uffbf\057\uffbf\060\uffbf\062\uffbf\063\uffbf\064\uffbf" +
    "\001\002\000\034\016\152\045\123\046\132\047\116\050" +
    "\120\051\133\052\130\053\117\054\131\055\121\056\127" +
    "\057\124\060\115\001\002\000\044\016\uffdd\026\uffdd\045" +
    "\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd" +
    "\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\062\uffdd\063" +
    "\uffdd\064\uffdd\001\002\000\034\026\154\045\123\046\132" +
    "\047\116\050\120\051\133\052\130\053\117\054\131\055" +
    "\121\056\127\057\124\060\115\001\002\000\004\020\155" +
    "\001\002\000\034\004\076\007\077\011\042\015\073\021" +
    "\050\022\061\023\053\024\057\041\055\042\060\054\112" +
    "\066\106\067\110\001\002\000\034\045\123\046\132\047" +
    "\116\050\120\051\133\052\130\053\117\054\131\055\121" +
    "\056\127\057\124\060\115\064\157\001\002\000\032\004" +
    "\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\014\ufff2" +
    "\027\ufff2\035\ufff2\036\ufff2\037\ufff2\044\ufff2\001\002\000" +
    "\020\011\042\021\050\022\061\023\053\024\057\041\055" +
    "\042\060\001\002\000\004\016\162\001\002\000\004\064" +
    "\uffe3\001\002\000\032\004\uffea\005\uffea\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\014\uffea\027\uffea\035\uffea\036\uffea\037" +
    "\uffea\044\uffea\001\002\000\032\004\uffe9\005\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\014\uffe9\027\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\044\uffe9\001\002\000\032\004\uffe5\005\uffe5" +
    "\006\uffe5\007\uffe5\010\uffe5\011\uffe5\014\uffe5\027\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\044\uffe5\001\002\000\032\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\014\uffe7\027" +
    "\uffe7\035\uffe7\036\uffe7\037\uffe7\044\uffe7\001\002\000\036" +
    "\004\076\007\077\011\042\015\170\021\050\022\061\023" +
    "\053\024\057\041\055\042\060\043\172\054\112\066\106" +
    "\067\110\001\002\000\036\004\076\007\077\011\042\015" +
    "\170\021\050\022\061\023\053\024\057\041\055\042\060" +
    "\043\172\054\112\066\106\067\110\001\002\000\032\045" +
    "\123\046\132\047\116\050\120\051\133\052\130\053\117" +
    "\054\131\055\121\056\127\057\124\060\115\001\002\000" +
    "\036\004\uffa6\007\uffa6\011\uffa6\015\uffa6\021\uffa6\022\uffa6" +
    "\023\uffa6\024\uffa6\041\uffa6\042\uffa6\043\uffa6\054\uffa6\066" +
    "\uffa6\067\uffa6\001\002\000\040\016\uffde\045\uffde\046\uffde" +
    "\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055" +
    "\uffde\056\uffde\057\uffde\060\uffde\062\212\063\213\001\002" +
    "\000\004\016\177\001\002\000\036\004\076\007\077\011" +
    "\042\015\170\021\050\022\061\023\053\024\057\041\055" +
    "\042\060\043\172\054\112\066\106\067\110\001\002\000" +
    "\004\016\uffa9\001\002\000\036\004\uffee\005\uffee\006\uffee" +
    "\007\uffee\010\uffee\011\uffee\014\uffee\027\uffee\030\202\031" +
    "\200\035\uffee\036\uffee\037\uffee\044\uffee\001\002\000\004" +
    "\013\017\001\002\000\032\004\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\014\ufff1\027\ufff1\035\ufff1\036\ufff1" +
    "\037\ufff1\044\ufff1\001\002\000\004\015\203\001\002\000" +
    "\036\004\076\007\077\011\042\015\170\021\050\022\061" +
    "\023\053\024\057\041\055\042\060\043\172\054\112\066" +
    "\106\067\110\001\002\000\004\016\205\001\002\000\004" +
    "\013\017\001\002\000\036\004\uffee\005\uffee\006\uffee\007" +
    "\uffee\010\uffee\011\uffee\014\uffee\027\uffee\030\202\031\200" +
    "\035\uffee\036\uffee\037\uffee\044\uffee\001\002\000\032\004" +
    "\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\014\ufff0" +
    "\027\ufff0\035\ufff0\036\ufff0\037\ufff0\044\ufff0\001\002\000" +
    "\032\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\014\uffef\027\uffef\035\uffef\036\uffef\037\uffef\044\uffef\001" +
    "\002\000\034\004\076\007\077\011\042\015\073\021\050" +
    "\022\061\023\053\024\057\041\055\042\060\054\112\066" +
    "\106\067\110\001\002\000\034\004\uffa5\007\uffa5\011\uffa5" +
    "\015\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\041\uffa5\042" +
    "\uffa5\054\uffa5\066\uffa5\067\uffa5\001\002\000\034\004\uffa4" +
    "\007\uffa4\011\uffa4\015\uffa4\021\uffa4\022\uffa4\023\uffa4\024" +
    "\uffa4\041\uffa4\042\uffa4\054\uffa4\066\uffa4\067\uffa4\001\002" +
    "\000\034\016\uffa8\045\uffde\046\uffde\047\uffde\050\uffde\051" +
    "\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde" +
    "\060\uffde\001\002\000\004\016\216\001\002\000\004\016" +
    "\uffa7\001\002\000\032\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\014\ufff8\027\ufff8\035\ufff8\036\ufff8\037" +
    "\ufff8\044\ufff8\001\002\000\040\002\ufffb\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\014\ufffb\027\ufffb\030" +
    "\ufffb\031\ufffb\035\ufffb\036\ufffb\037\ufffb\044\ufffb\001\002" +
    "\000\034\045\123\046\132\047\116\050\120\051\133\052" +
    "\130\053\117\054\131\055\121\056\127\057\124\060\115" +
    "\064\222\001\002\000\032\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\014\uffe6\027\uffe6\035\uffe6\036\uffe6" +
    "\037\uffe6\044\uffe6\001\002\000\006\020\225\064\uffa2\001" +
    "\002\000\004\064\227\001\002\000\034\004\076\007\077" +
    "\011\042\015\073\021\050\022\061\023\053\024\057\041" +
    "\055\042\060\054\112\066\106\067\110\001\002\000\034" +
    "\045\123\046\132\047\116\050\120\051\133\052\130\053" +
    "\117\054\131\055\121\056\127\057\124\060\115\064\uffa3" +
    "\001\002\000\032\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010" +
    "\uffbd\011\uffbd\014\uffbd\027\uffbd\035\uffbd\036\uffbd\037\uffbd" +
    "\044\uffbd\001\002\000\004\011\042\001\002\000\004\016" +
    "\232\001\002\000\004\064\uffe4\001\002\000\004\015\234" +
    "\001\002\000\014\004\024\005\015\006\005\007\014\010" +
    "\011\001\002\000\006\012\241\016\242\001\002\000\004" +
    "\011\042\001\002\000\006\012\uffd6\016\uffd6\001\002\000" +
    "\006\012\uffd4\016\uffd4\001\002\000\014\004\024\005\015" +
    "\006\005\007\014\010\011\001\002\000\004\013\ufff9\001" +
    "\002\000\006\012\uffd5\016\uffd5\001\002\000\004\002\001" +
    "\001\002\000\004\002\uffff\001\002\000\016\002\ufffe\004" +
    "\024\005\015\006\005\007\014\010\011\001\002\000\004" +
    "\040\250\001\002\000\004\015\251\001\002\000\004\016" +
    "\252\001\002\000\004\013\017\001\002\000\016\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\001\002\000" +
    "\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\014\002\007\003\005\004\012\005\011\031" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\245\001\001\000\010\003\244\004\012\005\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\232" +
    "\001\001\000\004\011\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\005\022\006\043" +
    "\012\025\013\031\014\030\015\027\016\017\017\042\025" +
    "\040\030\032\032\036\033\035\051\033\056\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\222\001\001\000\002\001\001\000\040\006\110" +
    "\021\102\034\220\035\100\036\101\037\103\042\106\043" +
    "\063\045\061\046\065\047\062\050\053\051\104\054\073" +
    "\055\074\001\001\000\034\005\022\006\043\013\216\014" +
    "\030\015\027\016\017\017\042\025\040\030\032\032\036" +
    "\033\035\051\033\056\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\006\110\021\102\034\152\035\100\036\101\037\103" +
    "\042\106\043\063\045\061\046\065\047\062\050\053\051" +
    "\104\054\073\055\074\001\001\000\040\006\110\021\102" +
    "\034\077\035\100\036\101\037\103\042\106\043\063\045" +
    "\061\046\065\047\062\050\053\051\104\054\073\055\074" +
    "\001\001\000\024\006\066\042\064\043\063\045\061\046" +
    "\065\047\062\050\053\052\050\053\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\006" +
    "\066\042\064\043\063\045\061\046\065\047\062\050\053" +
    "\053\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\006\110\021\102\034\150\035\100\036\101\037\103" +
    "\042\106\043\063\045\061\046\065\047\062\050\053\051" +
    "\104\054\073\055\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\144\001\001\000\004\006\140\001" +
    "\001\000\006\041\124\057\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\006\110\021" +
    "\102\034\136\035\100\036\101\037\103\042\106\043\063" +
    "\045\061\046\065\047\062\050\053\051\104\054\073\055" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\006\110\021\102\034\113\035\100\036\101" +
    "\037\103\042\106\043\063\045\061\046\065\047\062\050" +
    "\053\051\104\054\073\055\074\001\001\000\006\041\124" +
    "\057\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\006" +
    "\110\021\102\034\134\035\100\036\101\037\103\042\106" +
    "\043\063\045\061\046\065\047\062\050\053\051\104\054" +
    "\073\055\074\001\001\000\040\006\110\021\102\034\133" +
    "\035\100\036\101\037\103\042\106\043\063\045\061\046" +
    "\065\047\062\050\053\051\104\054\073\055\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\041\124\057\125" +
    "\001\001\000\006\041\124\057\125\001\001\000\002\001" +
    "\001\000\006\041\124\057\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\041\124\057\125\001" +
    "\001\000\002\001\001\000\006\041\124\057\125\001\001" +
    "\000\002\001\001\000\040\006\110\021\102\034\155\035" +
    "\100\036\101\037\103\042\106\043\063\045\061\046\065" +
    "\047\062\050\053\051\104\054\073\055\074\001\001\000" +
    "\006\041\124\057\125\001\001\000\002\001\001\000\022" +
    "\006\066\042\064\043\063\045\061\046\065\047\062\050" +
    "\053\053\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\006\110\020\173\021\172\024\174" +
    "\034\170\035\100\036\101\037\103\042\106\043\063\045" +
    "\061\046\065\047\062\050\053\051\104\054\073\055\074" +
    "\001\001\000\044\006\110\020\214\021\172\024\174\034" +
    "\150\035\100\036\101\037\103\042\106\043\063\045\061" +
    "\046\065\047\062\050\053\051\104\054\073\055\074\001" +
    "\001\000\006\041\124\057\125\001\001\000\002\001\001" +
    "\000\004\023\210\001\001\000\002\001\001\000\044\006" +
    "\110\020\175\021\172\024\174\034\170\035\100\036\101" +
    "\037\103\042\106\043\063\045\061\046\065\047\062\050" +
    "\053\051\104\054\073\055\074\001\001\000\002\001\001" +
    "\000\004\044\200\001\001\000\004\011\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\006\110\020\203" +
    "\021\172\024\174\034\170\035\100\036\101\037\103\042" +
    "\106\043\063\045\061\046\065\047\062\050\053\051\104" +
    "\054\073\055\074\001\001\000\002\001\001\000\004\011" +
    "\205\001\001\000\004\044\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\006\110\021\213\034\170\035" +
    "\100\036\101\037\103\042\106\043\063\045\061\046\065" +
    "\047\062\050\053\051\104\054\073\055\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\124\057\125\001\001\000\002\001\001" +
    "\000\004\022\223\001\001\000\002\001\001\000\040\006" +
    "\110\021\102\034\225\035\100\036\101\037\103\042\106" +
    "\043\063\045\061\046\065\047\062\050\053\051\104\054" +
    "\073\055\074\001\001\000\006\041\124\057\125\001\001" +
    "\000\002\001\001\000\004\006\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\235" +
    "\007\234\010\236\001\001\000\002\001\001\000\004\006" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\235\010\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\253" +
    "\004\012\005\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\252\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // asignacion_opcional ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_opcional",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // asignacion_opcional ::= IGUAL expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_opcional",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operador_logico ::= DISYUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_logico",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operador_logico ::= CONJUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_logico",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // negacion ::= NEGACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("negacion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion_logica ::= PARENTESIS_ABIERTO expresion_logica PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion_logica ::= expresion_relacional operador_logico expresion_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion_logica ::= negacion expresion_logica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operador_unario ::= RESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_unario",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operador_unario ::= DECREMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_unario",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operador_unario ::= INCREMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_unario",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operador_relacional ::= DIFERENTES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operador_relacional ::= IGUALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operador_relacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operador_relacional ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operador_relacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operador_relacional ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operador ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operador ::= MODULO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operador ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operador ::= POTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operador ::= RESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operador ::= SUMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion_relacional ::= expresion operador_relacional expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion_unaria ::= operador_unario expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_unaria",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion_binaria ::= expresion operador expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_binaria",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // asignacion ::= identificador IGUAL expresion DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaracion ::= tipo identificador asignacion_opcional DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo_array ::= CHAR identificador CORCHETE_ABIERTO ARRAY_NUMBER CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_array",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo_array ::= INT identificador CORCHETE_ABIERTO ARRAY_NUMBER CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_array",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // literal_string ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_string",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // literal_char ::= LITERAL_CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_char",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // literal_bool ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_bool",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // literal_bool ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_bool",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // literal_float ::= LITERAL_FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_float",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // literal_int ::= LITERAL_INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_int",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // literal ::= literal_string 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // literal ::= literal_char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // literal ::= literal_bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // literal ::= literal_float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // literal ::= literal_int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // paramInv ::= literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramInv",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // paramInv ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramInv",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametrosInv ::= paramInv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametrosInv",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametrosInv ::= parametrosInv COMA paramInv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametrosInv",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipo ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // param ::= tipo identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("param",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametros ::= parametros COMA param 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametros ::= param 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // llamada_funcion ::= identificador PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("llamada_funcion",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // llamada_funcion ::= identificador PARENTESIS_ABIERTO parametrosInv PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("llamada_funcion",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // identificador ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("identificador",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= acceso_arreglo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= tipo_array 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= expresion_binaria 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= expresion_unaria 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // escritura ::= PRINT PARENTESIS_ABIERTO paramInv PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("escritura",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lectura ::= READ PARENTESIS_ABIERTO identificador PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lectura",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= BREAK DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= RETURN expresion DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= llamada_funcion DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= asignacion_arreglo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= escritura DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= lectura DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= estructura_control 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= asignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= declaracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // else_parte ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("else_parte",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // else_parte ::= ELSE cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("else_parte",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // else_parte ::= ELIF PARENTESIS_ABIERTO expresion_logica PARENTESIS_CERRADO cuerpo_funcion else_parte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("else_parte",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion_if ::= IF PARENTESIS_ABIERTO expresion_logica PARENTESIS_CERRADO else_parte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_if",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // asignacion_arreglo ::= identificador CORCHETE_ABIERTO expresion CORCHETE_CERRADO IGUAL expresion DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // acceso_arreglo ::= identificador CORCHETE_ABIERTO expresion CORCHETE_CERRADO DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("acceso_arreglo",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // estructura_control ::= declaracion_for 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_control",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // estructura_control ::= declaracion_do_while 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_control",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // estructura_control ::= declaracion_if 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_control",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloque ::= sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloque ::= bloque sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nombre_funcion ::= tipo identificador PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nombre_funcion",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= nombre_funcion cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funcion",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo_funcion ::= LLAVE_ABIERTA bloque LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main ::= INT MAIN PARENTESIS_ABIERTO PARENTESIS_CERRADO cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("main",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= funcion main funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= funcion main 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= main funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= main 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

