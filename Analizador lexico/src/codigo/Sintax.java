
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Apr 19 14:21:05 CST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Apr 19 14:21:05 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\004\000\002\002\005\000\002\031\007" +
    "\000\002\011\005\000\002\003\004\000\002\004\007\000" +
    "\002\012\004\000\002\012\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\055\007\000\002\056" +
    "\011\000\002\017\010\000\002\043\010\000\002\043\004" +
    "\000\002\043\002\000\002\025\007\000\002\027\007\000" +
    "\002\030\011\000\002\026\004\000\002\026\004\000\002" +
    "\026\004\000\002\026\004\000\002\026\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\004" +
    "\000\002\013\004\000\002\013\003\000\002\013\004\000" +
    "\002\013\005\000\002\013\004\000\002\032\005\000\002" +
    "\033\005\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\005\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\006\003\000" +
    "\002\050\006\000\002\050\005\000\002\007\003\000\002" +
    "\007\005\000\002\010\004\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\051\005\000\002\051\003\000\002\052\003\000" +
    "\002\052\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\042" +
    "\003\000\002\044\003\000\002\045\003\000\002\045\003" +
    "\000\002\046\003\000\002\047\003\000\002\053\007\000" +
    "\002\053\007\000\002\014\006\000\002\015\004\000\002" +
    "\036\005\000\002\035\004\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\020\004\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\024\003\000\002\023\003\000" +
    "\002\023\003\000\002\054\004\000\002\054\004\000\002" +
    "\054\004\000\002\054\002\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\014\004\004\005\014\006\005\007\015\010" +
    "\011\001\002\000\006\011\uffcc\037\310\001\002\000\004" +
    "\011\uffca\001\002\000\004\004\307\001\002\000\016\002" +
    "\000\004\024\005\014\006\005\007\015\010\011\001\002" +
    "\000\004\002\304\001\002\000\004\011\uffc8\001\002\000" +
    "\004\011\043\001\002\000\004\013\017\001\002\000\004" +
    "\011\uffcb\001\002\000\004\011\uffc9\001\002\000\006\002" +
    "\ufffa\004\ufffa\001\002\000\034\004\024\005\014\006\005" +
    "\007\015\010\011\011\043\026\027\032\045\033\031\034" +
    "\025\035\020\036\041\043\036\001\002\000\004\015\271" +
    "\001\002\000\036\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\014\uffe3\026\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\043\uffe3\001\002\000\036\004\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\014\uffe0\026\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\043\uffe0\001" +
    "\002\000\004\011\043\001\002\000\004\011\uffcc\001\002" +
    "\000\034\004\101\007\102\011\043\015\076\020\053\021" +
    "\064\022\056\023\062\040\060\041\063\053\115\065\112" +
    "\066\114\001\002\000\036\004\024\005\014\006\005\007" +
    "\015\010\011\011\043\014\257\026\027\032\045\033\031" +
    "\034\025\035\020\036\041\043\036\001\002\000\004\015" +
    "\241\001\002\000\036\004\uffe4\005\uffe4\006\uffe4\007\uffe4" +
    "\010\uffe4\011\uffe4\014\uffe4\026\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\043\uffe4\001\002\000\004\013\017" +
    "\001\002\000\036\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\014\uffe5\026\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\043\uffe5\001\002\000\036\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\014\ufff7\026\ufff7" +
    "\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\043\ufff7\001" +
    "\002\000\036\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\014\ufff5\026\ufff5\032\ufff5\033\ufff5\034\ufff5\035" +
    "\ufff5\036\ufff5\043\ufff5\001\002\000\004\063\232\001\002" +
    "\000\004\063\231\001\002\000\004\063\230\001\002\000" +
    "\004\063\227\001\002\000\004\015\225\001\002\000\036" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\014" +
    "\ufff4\026\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4" +
    "\043\ufff4\001\002\000\110\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\011\uffd2\012\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\024\uffd2\025\uffd2\026\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2" +
    "\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055" +
    "\uffd2\056\uffd2\057\uffd2\063\uffd2\065\uffd2\066\uffd2\001\002" +
    "\000\036\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\014\ufff6\026\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6" +
    "\036\ufff6\043\ufff6\001\002\000\004\015\156\001\002\000" +
    "\044\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95" +
    "\014\uff95\015\052\017\051\024\047\026\uff95\032\uff95\033" +
    "\uff95\034\uff95\035\uff95\036\uff95\043\uff95\001\002\000\034" +
    "\004\101\007\102\011\043\015\076\020\053\021\064\022" +
    "\056\023\062\040\060\041\063\053\115\065\112\066\114" +
    "\001\002\000\042\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010" +
    "\uffb5\011\uffb5\014\uffb5\016\uffb5\026\uffb5\032\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\043\uffb5\063\uffb5\001\002\000" +
    "\040\004\101\007\102\011\043\015\076\020\053\021\064" +
    "\022\056\023\062\035\020\036\041\040\060\041\063\053" +
    "\115\065\112\066\114\001\002\000\022\011\043\016\061" +
    "\020\053\021\064\022\056\023\062\040\060\041\063\001" +
    "\002\000\042\012\uffbe\016\uffbe\025\uffbe\044\uffbe\045\uffbe" +
    "\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054" +
    "\uffbe\055\uffbe\056\uffbe\057\uffbe\063\uffbe\001\002\000\006" +
    "\012\uffc6\016\uffc6\001\002\000\006\012\073\016\074\001" +
    "\002\000\042\012\uffba\016\uffba\025\uffba\044\uffba\045\uffba" +
    "\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054" +
    "\uffba\055\uffba\056\uffba\057\uffba\063\uffba\001\002\000\042" +
    "\012\uffbf\016\uffbf\025\uffbf\044\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf" +
    "\056\uffbf\057\uffbf\063\uffbf\001\002\000\042\012\uffbc\016" +
    "\uffbc\025\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057" +
    "\uffbc\063\uffbc\001\002\000\040\016\uffd0\025\uffd0\044\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053" +
    "\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\063\uffd0\001\002" +
    "\000\042\012\uffb9\016\uffb9\025\uffb9\044\uffb9\045\uffb9\046" +
    "\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9" +
    "\055\uffb9\056\uffb9\057\uffb9\063\uffb9\001\002\000\042\012" +
    "\uffbb\016\uffbb\025\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb" +
    "\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\063\uffbb\001\002\000\042\012\uffbd\016\uffbd" +
    "\025\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051" +
    "\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd" +
    "\063\uffbd\001\002\000\042\012\uffc2\016\uffc2\025\uffc2\044" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\063\uffc2\001" +
    "\002\000\042\012\uffc0\016\uffc0\025\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054" +
    "\uffc0\055\uffc0\056\uffc0\057\uffc0\063\uffc0\001\002\000\042" +
    "\012\uffc3\016\uffc3\025\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3" +
    "\056\uffc3\057\uffc3\063\uffc3\001\002\000\006\012\uffc4\016" +
    "\uffc4\001\002\000\042\012\uffc1\016\uffc1\025\uffc1\044\uffc1" +
    "\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053" +
    "\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\063\uffc1\001\002" +
    "\000\006\012\uffc5\016\uffc5\001\002\000\020\011\043\020" +
    "\053\021\064\022\056\023\062\040\060\041\063\001\002" +
    "\000\040\016\uffd1\025\uffd1\044\uffd1\045\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1" +
    "\056\uffd1\057\uffd1\063\uffd1\001\002\000\006\012\uffc7\016" +
    "\uffc7\001\002\000\034\004\101\007\102\011\043\015\076" +
    "\020\053\021\064\022\056\023\062\040\060\041\063\053" +
    "\115\065\112\066\114\001\002\000\040\016\uffd5\025\uffd5" +
    "\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\063\uffd5" +
    "\001\002\000\040\016\uffd3\025\uffd3\044\uffd3\045\uffd3\046" +
    "\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3" +
    "\055\uffd3\056\uffd3\057\uffd3\063\uffd3\001\002\000\004\011" +
    "\043\001\002\000\004\011\043\001\002\000\020\052\127" +
    "\053\122\054\124\055\130\056\126\057\125\063\136\001" +
    "\002\000\040\016\uffd8\025\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055" +
    "\uffd8\056\uffd8\057\uffd8\063\uffd8\001\002\000\040\016\uffd7" +
    "\025\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051" +
    "\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7" +
    "\063\uffd7\001\002\000\040\016\uffd4\025\uffd4\044\uffd4\045" +
    "\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4" +
    "\054\uffd4\055\uffd4\056\uffd4\057\uffd4\063\uffd4\001\002\000" +
    "\034\004\101\007\102\011\043\015\076\020\053\021\064" +
    "\022\056\023\062\040\060\041\063\053\115\065\112\066" +
    "\114\001\002\000\004\063\134\001\002\000\004\063\133" +
    "\001\002\000\034\004\uffb2\007\uffb2\011\uffb2\015\uffb2\020" +
    "\uffb2\021\uffb2\022\uffb2\023\uffb2\040\uffb2\041\uffb2\053\uffb2" +
    "\065\uffb2\066\uffb2\001\002\000\040\016\uffd9\025\uffd9\044" +
    "\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\063\uffd9\001" +
    "\002\000\034\004\uffb1\007\uffb1\011\uffb1\015\uffb1\020\uffb1" +
    "\021\uffb1\022\uffb1\023\uffb1\040\uffb1\041\uffb1\053\uffb1\065" +
    "\uffb1\066\uffb1\001\002\000\034\004\uffb0\007\uffb0\011\uffb0" +
    "\015\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\040\uffb0\041" +
    "\uffb0\053\uffb0\065\uffb0\066\uffb0\001\002\000\044\015\052" +
    "\016\uffda\024\117\025\uffda\044\uffda\045\uffda\046\uffda\047" +
    "\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda" +
    "\056\uffda\057\uffda\063\uffda\001\002\000\034\004\101\007" +
    "\102\011\043\015\076\020\053\021\064\022\056\023\062" +
    "\040\060\041\063\053\115\065\112\066\114\001\002\000" +
    "\020\025\123\052\127\053\122\054\124\055\130\056\126" +
    "\057\125\001\002\000\034\004\101\007\102\011\043\015" +
    "\076\020\053\021\064\022\056\023\062\040\060\041\063" +
    "\053\115\065\112\066\114\001\002\000\034\004\uffae\007" +
    "\uffae\011\uffae\015\uffae\020\uffae\021\uffae\022\uffae\023\uffae" +
    "\040\uffae\041\uffae\053\uffae\065\uffae\066\uffae\001\002\000" +
    "\004\063\131\001\002\000\034\004\uffac\007\uffac\011\uffac" +
    "\015\uffac\020\uffac\021\uffac\022\uffac\023\uffac\040\uffac\041" +
    "\uffac\053\uffac\065\uffac\066\uffac\001\002\000\034\004\uffad" +
    "\007\uffad\011\uffad\015\uffad\020\uffad\021\uffad\022\uffad\023" +
    "\uffad\040\uffad\041\uffad\053\uffad\065\uffad\066\uffad\001\002" +
    "\000\034\004\uffab\007\uffab\011\uffab\015\uffab\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\040\uffab\041\uffab\053\uffab\065\uffab" +
    "\066\uffab\001\002\000\034\004\uffaf\007\uffaf\011\uffaf\015" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\040\uffaf\041\uffaf" +
    "\053\uffaf\065\uffaf\066\uffaf\001\002\000\034\004\uffaa\007" +
    "\uffaa\011\uffaa\015\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\040\uffaa\041\uffaa\053\uffaa\065\uffaa\066\uffaa\001\002\000" +
    "\040\016\ufff3\025\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3" +
    "\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056" +
    "\ufff3\057\ufff3\063\ufff3\001\002\000\040\016\uffb4\025\uffb4" +
    "\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052" +
    "\127\053\122\054\124\055\130\056\126\057\125\063\uffb4" +
    "\001\002\000\042\004\uff97\005\uff97\006\uff97\007\uff97\010" +
    "\uff97\011\uff97\014\uff97\016\uff97\026\uff97\032\uff97\033\uff97" +
    "\034\uff97\035\uff97\036\uff97\043\uff97\063\uff97\001\002\000" +
    "\042\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96" +
    "\014\uff96\016\uff96\026\uff96\032\uff96\033\uff96\034\uff96\035" +
    "\uff96\036\uff96\043\uff96\063\uff96\001\002\000\040\016\uffb3" +
    "\025\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051" +
    "\uffb3\052\127\053\122\054\124\055\130\056\126\057\125" +
    "\063\uffb3\001\002\000\042\004\uff98\005\uff98\006\uff98\007" +
    "\uff98\010\uff98\011\uff98\014\uff98\016\uff98\026\uff98\032\uff98" +
    "\033\uff98\034\uff98\035\uff98\036\uff98\043\uff98\063\uff98\001" +
    "\002\000\004\024\140\001\002\000\004\064\141\001\002" +
    "\000\004\025\142\001\002\000\040\016\uffb7\025\uffb7\044" +
    "\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7" +
    "\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\063\uffb7\001" +
    "\002\000\004\024\144\001\002\000\004\064\145\001\002" +
    "\000\004\025\146\001\002\000\040\016\uffb8\025\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\063\uffb8\001" +
    "\002\000\020\016\150\052\127\053\122\054\124\055\130" +
    "\056\126\057\125\001\002\000\040\016\uffd6\025\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6" +
    "\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\063\uffd6\001" +
    "\002\000\020\025\152\052\127\053\122\054\124\055\130" +
    "\056\126\057\125\001\002\000\004\017\153\001\002\000" +
    "\034\004\101\007\102\011\043\015\076\020\053\021\064" +
    "\022\056\023\062\040\060\041\063\053\115\065\112\066" +
    "\114\001\002\000\020\052\127\053\122\054\124\055\130" +
    "\056\126\057\125\063\155\001\002\000\036\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\014\ufff2\026\ufff2" +
    "\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\043\ufff2\001" +
    "\002\000\004\011\043\001\002\000\006\017\051\063\uff95" +
    "\001\002\000\004\016\223\001\002\000\004\063\162\001" +
    "\002\000\036\004\101\007\102\011\043\015\163\020\053" +
    "\021\064\022\056\023\062\040\060\041\063\042\165\053" +
    "\115\065\112\066\114\001\002\000\036\004\101\007\102" +
    "\011\043\015\163\020\053\021\064\022\056\023\062\040" +
    "\060\041\063\042\165\053\115\065\112\066\114\001\002" +
    "\000\032\044\212\045\215\046\210\047\211\050\216\051" +
    "\213\052\127\053\122\054\124\055\130\056\126\057\125" +
    "\001\002\000\036\004\uff9f\007\uff9f\011\uff9f\015\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\040\uff9f\041\uff9f\042\uff9f" +
    "\053\uff9f\065\uff9f\066\uff9f\001\002\000\006\061\205\062" +
    "\206\001\002\000\004\063\172\001\002\000\036\004\101" +
    "\007\102\011\043\015\163\020\053\021\064\022\056\023" +
    "\062\040\060\041\063\042\165\053\115\065\112\066\114" +
    "\001\002\000\006\016\uffa3\063\uffa3\001\002\000\010\011" +
    "\043\065\176\066\173\001\002\000\004\011\043\001\002" +
    "\000\012\016\uff95\017\051\065\202\066\201\001\002\000" +
    "\004\016\uffec\001\002\000\004\011\043\001\002\000\004" +
    "\016\uffe6\001\002\000\004\016\uffea\001\002\000\004\016" +
    "\uffe7\001\002\000\004\016\uffe8\001\002\000\004\016\uffe9" +
    "\001\002\000\002\001\002\000\002\001\002\000\002\001" +
    "\002\000\006\016\uffa2\063\uffa2\001\002\000\034\004\uffa7" +
    "\007\uffa7\011\uffa7\015\uffa7\020\uffa7\021\uffa7\022\uffa7\023" +
    "\uffa7\040\uffa7\041\uffa7\053\uffa7\065\uffa7\066\uffa7\001\002" +
    "\000\034\004\uffa6\007\uffa6\011\uffa6\015\uffa6\020\uffa6\021" +
    "\uffa6\022\uffa6\023\uffa6\040\uffa6\041\uffa6\053\uffa6\065\uffa6" +
    "\066\uffa6\001\002\000\034\004\uffa9\007\uffa9\011\uffa9\015" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\040\uffa9\041\uffa9" +
    "\053\uffa9\065\uffa9\066\uffa9\001\002\000\034\004\uffa4\007" +
    "\uffa4\011\uffa4\015\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4" +
    "\040\uffa4\041\uffa4\053\uffa4\065\uffa4\066\uffa4\001\002\000" +
    "\034\004\101\007\102\011\043\015\076\020\053\021\064" +
    "\022\056\023\062\040\060\041\063\053\115\065\112\066" +
    "\114\001\002\000\034\004\uffa8\007\uffa8\011\uffa8\015\uffa8" +
    "\020\uffa8\021\uffa8\022\uffa8\023\uffa8\040\uffa8\041\uffa8\053" +
    "\uffa8\065\uffa8\066\uffa8\001\002\000\034\004\uffa5\007\uffa5" +
    "\011\uffa5\015\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\040" +
    "\uffa5\041\uffa5\053\uffa5\065\uffa5\066\uffa5\001\002\000\022" +
    "\016\uffa1\052\127\053\122\054\124\055\130\056\126\057" +
    "\125\063\uffa1\001\002\000\034\016\150\044\212\045\215" +
    "\046\210\047\211\050\216\051\213\052\127\053\122\054" +
    "\124\055\130\056\126\057\125\001\002\000\004\016\222" +
    "\001\002\000\006\016\uffa0\063\uffa0\001\002\000\004\013" +
    "\017\001\002\000\036\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\014\uffed\026\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\043\uffed\001\002\000\004\016\226" +
    "\001\002\000\004\063\uffdb\001\002\000\036\004\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\014\uffe2\026\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\043\uffe2\001" +
    "\002\000\036\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\014\uffe1\026\uffe1\032\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\043\uffe1\001\002\000\036\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\011\uffdd\014\uffdd\026\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\043\uffdd\001\002" +
    "\000\036\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011" +
    "\uffdf\014\uffdf\026\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\043\uffdf\001\002\000\004\031\234\001\002\000" +
    "\004\015\235\001\002\000\036\004\101\007\102\011\043" +
    "\015\163\020\053\021\064\022\056\023\062\040\060\041" +
    "\063\042\165\053\115\065\112\066\114\001\002\000\004" +
    "\016\237\001\002\000\004\063\240\001\002\000\036\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\014\uffeb" +
    "\026\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\043" +
    "\uffeb\001\002\000\036\004\101\007\102\011\043\015\163" +
    "\020\053\021\064\022\056\023\062\040\060\041\063\042" +
    "\165\053\115\065\112\066\114\001\002\000\004\016\243" +
    "\001\002\000\004\013\017\001\002\000\042\004\uffee\005" +
    "\uffee\006\uffee\007\uffee\010\uffee\011\uffee\014\uffee\026\uffee" +
    "\027\246\030\245\032\uffee\033\uffee\034\uffee\035\uffee\036" +
    "\uffee\043\uffee\001\002\000\004\013\017\001\002\000\004" +
    "\015\250\001\002\000\036\004\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\014\ufff1\026\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\043\ufff1\001\002\000\036\004" +
    "\101\007\102\011\043\015\163\020\053\021\064\022\056" +
    "\023\062\040\060\041\063\042\165\053\115\065\112\066" +
    "\114\001\002\000\004\016\252\001\002\000\004\013\017" +
    "\001\002\000\042\004\uffee\005\uffee\006\uffee\007\uffee\010" +
    "\uffee\011\uffee\014\uffee\026\uffee\027\246\030\245\032\uffee" +
    "\033\uffee\034\uffee\035\uffee\036\uffee\043\uffee\001\002\000" +
    "\036\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\014\ufff0\026\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036" +
    "\ufff0\043\ufff0\001\002\000\036\004\uffef\005\uffef\006\uffef" +
    "\007\uffef\010\uffef\011\uffef\014\uffef\026\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\036\uffef\043\uffef\001\002\000\036" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\014" +
    "\ufff8\026\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8" +
    "\043\ufff8\001\002\000\046\002\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\011\ufffb\014\ufffb\026\ufffb\027\ufffb" +
    "\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036" +
    "\ufffb\043\ufffb\001\002\000\020\052\127\053\122\054\124" +
    "\055\130\056\126\057\125\063\261\001\002\000\036\004" +
    "\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\014\uffde" +
    "\026\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\043" +
    "\uffde\001\002\000\006\017\263\063\uff99\001\002\000\040" +
    "\004\101\007\102\011\043\015\076\020\053\021\064\022" +
    "\056\023\062\035\020\036\041\040\060\041\063\053\115" +
    "\065\112\066\114\001\002\000\004\063\265\001\002\000" +
    "\036\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6" +
    "\014\uffb6\026\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\043\uffb6\001\002\000\020\052\127\053\122\054\124" +
    "\055\130\056\126\057\125\063\uff9c\001\002\000\004\063" +
    "\uff9a\001\002\000\004\063\uff9b\001\002\000\004\016\272" +
    "\001\002\000\004\063\uffdc\001\002\000\004\015\274\001" +
    "\002\000\014\004\024\005\014\006\005\007\015\010\011" +
    "\001\002\000\006\012\301\016\302\001\002\000\004\011" +
    "\043\001\002\000\006\012\uffcf\016\uffcf\001\002\000\006" +
    "\012\uffcd\016\uffcd\001\002\000\014\004\024\005\014\006" +
    "\005\007\015\010\011\001\002\000\004\013\ufff9\001\002" +
    "\000\006\012\uffce\016\uffce\001\002\000\004\002\001\001" +
    "\002\000\004\002\uffff\001\002\000\016\002\ufffe\004\024" +
    "\005\014\006\005\007\015\010\011\001\002\000\004\037" +
    "\310\001\002\000\004\015\311\001\002\000\004\016\312" +
    "\001\002\000\004\013\017\001\002\000\016\002\ufffc\004" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\001\002\000\004" +
    "\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\014\002\007\003\005\004\012\005\011\031" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\305\001\001\000\010\003\304\004\012\005\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\272" +
    "\001\001\000\004\011\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\005\022\006\045" +
    "\012\025\013\032\014\031\015\027\016\020\017\043\025" +
    "\041\030\033\032\037\033\036\050\034\056\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\261\001\001\000\002\001\001\000\036\006\115" +
    "\034\257\035\103\036\104\037\106\041\112\042\066\044" +
    "\064\045\070\046\065\047\056\050\105\053\076\055\077" +
    "\001\001\000\034\005\022\006\045\013\255\014\031\015" +
    "\027\016\020\017\043\025\041\030\033\032\037\033\036" +
    "\050\034\056\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\232\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\047\001\001\000\036\006\115" +
    "\034\150\035\103\036\104\037\106\041\112\042\066\044" +
    "\064\045\070\046\065\047\056\050\105\053\076\055\077" +
    "\001\001\000\002\001\001\000\042\006\115\032\110\033" +
    "\107\034\102\035\103\036\104\037\106\041\112\042\066" +
    "\044\064\045\070\046\065\047\056\050\105\053\076\055" +
    "\077\001\001\000\024\006\071\041\067\042\066\044\064" +
    "\045\070\046\065\047\056\051\054\052\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\071\041\067\042\066\044\064\045\070\046\065\047" +
    "\056\052\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\006\115\034\146\035\103\036\104\037\106\041" +
    "\112\042\066\044\064\045\070\046\065\047\056\050\105" +
    "\053\076\055\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\142\001\001\000\004\006\136\001\001" +
    "\000\004\040\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\006\115\034\134\035\103" +
    "\036\104\037\106\041\112\042\066\044\064\045\070\046" +
    "\065\047\056\050\105\053\076\055\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\006\115\034\117\035\103\036\104\037\106\041" +
    "\112\042\066\044\064\045\070\046\065\047\056\050\105" +
    "\053\076\055\077\001\001\000\004\040\120\001\001\000" +
    "\036\006\115\034\131\035\103\036\104\037\106\041\112" +
    "\042\066\044\064\045\070\046\065\047\056\050\105\053" +
    "\076\055\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\120\001\001\000\002\001\001\000" +
    "\004\040\120\001\001\000\002\001\001\000\036\006\115" +
    "\034\153\035\103\036\104\037\106\041\112\042\066\044" +
    "\064\045\070\046\065\047\056\050\105\053\076\055\077" +
    "\001\001\000\004\040\120\001\001\000\002\001\001\000" +
    "\010\006\156\015\160\027\157\001\001\000\004\022\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\006" +
    "\115\020\166\021\165\024\167\034\163\035\103\036\104" +
    "\037\106\041\112\042\066\044\064\045\070\046\065\047" +
    "\056\050\105\053\076\055\077\001\001\000\044\006\115" +
    "\020\220\021\165\024\167\034\217\035\103\036\104\037" +
    "\106\041\112\042\066\044\064\045\070\046\065\047\056" +
    "\050\105\053\076\055\077\001\001\000\006\040\120\057" +
    "\213\001\001\000\002\001\001\000\004\023\203\001\001" +
    "\000\002\001\001\000\044\006\115\020\170\021\165\024" +
    "\167\034\163\035\103\036\104\037\106\041\112\042\066" +
    "\044\064\045\070\046\065\047\056\050\105\053\076\055" +
    "\077\001\001\000\002\001\001\000\010\006\173\015\176" +
    "\026\174\001\001\000\004\006\202\001\001\000\004\022" +
    "\047\001\001\000\002\001\001\000\004\006\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\006\115\034\216\035\103\036\104\037" +
    "\106\041\112\042\066\044\064\045\070\046\065\047\056" +
    "\050\105\053\076\055\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\120\001\001\000\006\040\120" +
    "\057\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\006\115\020\235\021\165\024\167\034" +
    "\163\035\103\036\104\037\106\041\112\042\066\044\064" +
    "\045\070\046\065\047\056\050\105\053\076\055\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\006\115\020\241\021\165\024\167\034\163\035" +
    "\103\036\104\037\106\041\112\042\066\044\064\045\070" +
    "\046\065\047\056\050\105\053\076\055\077\001\001\000" +
    "\002\001\001\000\004\011\243\001\001\000\004\043\246" +
    "\001\001\000\004\011\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\006\115\020\250\021\165\024\167" +
    "\034\163\035\103\036\104\037\106\041\112\042\066\044" +
    "\064\045\070\046\065\047\056\050\105\053\076\055\077" +
    "\001\001\000\002\001\001\000\004\011\252\001\001\000" +
    "\004\043\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\120\001" +
    "\001\000\002\001\001\000\004\054\263\001\001\000\042" +
    "\006\115\032\267\033\266\034\265\035\103\036\104\037" +
    "\106\041\112\042\066\044\064\045\070\046\065\047\056" +
    "\050\105\053\076\055\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\275\007\274\010\276\001\001" +
    "\000\002\001\001\000\004\006\277\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\275\010\302\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\313\004\012\005\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\312\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    // Método que se invoca cuando ocurre un error de sintaxis

    public void syntax_error(Symbol s){
        this.s = s;
    }

    // Devuelve el símbolo actual

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // asignacion_opcional ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_opcional",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // asignacion_opcional ::= IGUAL escritura DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_opcional",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // asignacion_opcional ::= IGUAL lectura DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_opcional",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // asignacion_opcional ::= IGUAL expresion DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_opcional",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // declaracion_opcional ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_opcional",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // declaracion_opcional ::= IGUAL escritura 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_opcional",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // declaracion_opcional ::= IGUAL lectura 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_opcional",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // declaracion_opcional ::= IGUAL expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_opcional",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operador_logico ::= DISYUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_logico",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operador_logico ::= CONJUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_logico",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // negacion ::= NEGACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("negacion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion_logica ::= PARENTESIS_ABIERTO expresion_logica PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion_logica ::= expresion operador_relacional expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion_logica ::= expresion_relacional operador_logico expresion_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion_logica ::= negacion expresion_logica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operador_relacional ::= DIFERENTES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operador_relacional ::= IGUALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operador_relacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operador_relacional ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operador_relacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operador_relacional ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operador ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operador ::= MODULO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operador ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operador ::= POTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operador ::= RESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operador ::= SUMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operador_unario ::= RESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_unario",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operador_unario ::= DECREMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_unario",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operador_unario ::= INCREMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_unario",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion_unaria ::= operador_unario expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_unaria",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion_binaria ::= expresion operador expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_binaria",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // asignacion ::= identificador asignacion_opcional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaracion ::= tipo identificador declaracion_opcional DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipo_array ::= CHAR identificador CORCHETE_ABIERTO ARRAY_NUMBER CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_array",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipo_array ::= INT identificador CORCHETE_ABIERTO ARRAY_NUMBER CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_array",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // literal_string ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_string",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // literal_char ::= LITERAL_CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_char",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // literal_bool ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_bool",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // literal_bool ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_bool",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // literal_float ::= LITERAL_FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_float",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // literal_int ::= LITERAL_INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_int",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // literal ::= literal_string 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // literal ::= literal_char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // literal ::= literal_bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // literal ::= literal_float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // literal ::= literal_int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // paramInv ::= literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramInv",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // paramInv ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramInv",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parametrosInv ::= paramInv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametrosInv",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parametrosInv ::= parametrosInv COMA paramInv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametrosInv",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // param ::= tipo identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("param",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametros ::= parametros COMA param 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametros ::= param 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // llamada_funcion ::= identificador PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("llamada_funcion",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // llamada_funcion ::= identificador PARENTESIS_ABIERTO parametrosInv PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("llamada_funcion",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // identificador ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("identificador",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= acceso_arreglo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= tipo_array 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expresion_binaria 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expresion_unaria 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // escritura ::= PRINT PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("escritura",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lectura ::= READ PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lectura",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= BREAK DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= RETURN expresion DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= llamada_funcion DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= asignacion_arreglo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= escritura DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= lectura DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= estructura_control 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= asignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= declaracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inc_for ::= asignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inc_for",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inc_for ::= identificador DECREMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inc_for",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inc_for ::= identificador INCREMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inc_for",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inc_for ::= DECREMENTO identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inc_for",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inc_for ::= INCREMENTO identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inc_for",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracion_do_while ::= DO cuerpo_funcion WHILE PARENTESIS_ABIERTO expresion_logica PARENTESIS_CERRADO DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_do_while",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // condicion_for ::= asignacion DOLAR expresion_logica DOLAR inc_for 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_for",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion_for ::= FOR PARENTESIS_ABIERTO condicion_for PARENTESIS_CERRADO cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // else_parte ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("else_parte",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // else_parte ::= ELSE cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("else_parte",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // else_parte ::= ELIF PARENTESIS_ABIERTO expresion_logica PARENTESIS_CERRADO cuerpo_funcion else_parte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("else_parte",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion_if ::= IF PARENTESIS_ABIERTO expresion_logica PARENTESIS_CERRADO cuerpo_funcion else_parte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_if",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // asignacion_arreglo ::= identificador CORCHETE_ABIERTO expresion CORCHETE_CERRADO IGUAL expresion DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // acceso_arreglo ::= identificador CORCHETE_ABIERTO expresion CORCHETE_CERRADO DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("acceso_arreglo",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // estructura_control ::= declaracion_for 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_control",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // estructura_control ::= declaracion_do_while 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_control",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // estructura_control ::= declaracion_if 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_control",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloque ::= sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloque ::= bloque sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nombre_funcion ::= tipo identificador PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nombre_funcion",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= nombre_funcion cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funcion",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo_funcion ::= LLAVE_ABIERTA bloque LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main ::= INT MAIN PARENTESIS_ABIERTO PARENTESIS_CERRADO cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("main",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= funcion main funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= funcion main 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= main funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= main 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

