package codigo;

import java_cup.runtime.Symbol;

// Sección para el código del parser

parser code
{:
    private Symbol s;

    // Método que se invoca cuando ocurre un error de sintaxis

    public void syntax_error(Symbol s){
        this.s = s;
    }

    // Devuelve el símbolo actual

    public Symbol getS(){
        return this.s;
}
:};

// Terminales

terminal INT, FLOAT, BOOL, CHAR, STRING, IDENTIFICADOR, COMA, LLAVE_ABIERTA,
         LLAVE_CERRADA, PARENTESIS_ABIERTO, PARENTESIS_CERRADO,
         IGUAL, LITERAL_INT, LITERAL_FLOAT,
         LITERAL_CHAR, LITERAL_STRING,
         CORCHETE_ABIERTO,
         CORCHETE_CERRADO, IF, ELIF, ELSE, WHILE, FOR, DO, RETURN,
         READ, PRINT, MAIN, TRUE, FALSE, NEGACION, BREAK, MENOR_QUE,
         MENOR_IGUAL, MAYOR_QUE, MAYOR_IGUAL, IGUALES, DIFERENTES,SUMA,RESTA,
         MULTIPLICACION, DIVISION,MODULO, POTENCIA, ERROR,
         CONJUNCION, DISYUNCION, DOLAR,
        ARRAY_NUMBER,INCREMENTO,DECREMENTO;


// No terminales

non terminal inicio, funcion, nombre_funcion, tipo,
             identificador, parametros, param, cuerpo_funcion,
             bloque, sentencia, declaracion, asignacion,
             estructura_control, declaracion_if,
             expresion_logica, expresion_relacional,
             asignacion_opcional, operador_logico, negacion, 
             declaracion_for, inc_for, condicion_for,
             declaracion_do_while, main, lectura, escritura, expresion,
             expresion_unaria, expresion_binaria, operador_unario,
             operador, literal, literal_int,else_parte,
             literal_float, literal_bool, literal_char, literal_string,
             llamada_funcion, parametrosInv, paramInv, tipo_array,declaracion_opcional,
             acceso_arreglo,asignacion_arreglo,operador_relacional;

// Precedencias

precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION, MODULO;
precedence right POTENCIA;
precedence left CONJUNCION, DISYUNCION;
precedence left MENOR_QUE, MENOR_IGUAL, MAYOR_QUE, MAYOR_IGUAL, IGUALES, DIFERENTES;

// Regla inicial

start with expresion;

// Reglas para la sección "inicio"

inicio::= main 
        | main funcion 
        | funcion main 
        | funcion main funcion;

main ::= INT MAIN PARENTESIS_ABIERTO PARENTESIS_CERRADO cuerpo_funcion;

cuerpo_funcion ::= LLAVE_ABIERTA bloque LLAVE_CERRADA;

funcion::= nombre_funcion cuerpo_funcion;

nombre_funcion ::= tipo identificador PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO;

bloque ::= bloque sentencia  | sentencia;

// Reglas para la sección "estructura_control"

estructura_control::= declaracion_if 
                    | declaracion_do_while 
                    | declaracion_for;

acceso_arreglo ::= identificador CORCHETE_ABIERTO expresion CORCHETE_CERRADO DOLAR;

asignacion_arreglo ::= identificador CORCHETE_ABIERTO expresion CORCHETE_CERRADO IGUAL expresion DOLAR;

declaracion_if ::= IF PARENTESIS_ABIERTO expresion_logica PARENTESIS_CERRADO cuerpo_funcion else_parte;

else_parte ::= ELIF PARENTESIS_ABIERTO expresion_logica PARENTESIS_CERRADO cuerpo_funcion else_parte
             | ELSE cuerpo_funcion
             |;

declaracion_for ::= FOR PARENTESIS_ABIERTO condicion_for PARENTESIS_CERRADO cuerpo_funcion;

condicion_for ::= asignacion DOLAR expresion_logica DOLAR inc_for;

declaracion_do_while ::= DO cuerpo_funcion WHILE PARENTESIS_ABIERTO expresion_logica PARENTESIS_CERRADO DOLAR;

inc_for::=  INCREMENTO identificador
               | DECREMENTO identificador
               | identificador INCREMENTO
               | identificador DECREMENTO
               | asignacion;

// Reglas para las posibles sentencias

sentencia ::= declaracion
            | asignacion
            | estructura_control
            | lectura DOLAR
            | escritura DOLAR
            | asignacion_arreglo
            | llamada_funcion DOLAR
            | RETURN expresion DOLAR
            | BREAK DOLAR;


lectura ::= READ PARENTESIS_ABIERTO PARENTESIS_CERRADO ;

escritura ::= PRINT PARENTESIS_ABIERTO PARENTESIS_CERRADO;

// Reglas para las posibles expressiones

expresion ::= identificador 
            | literal 
            | expresion_unaria 
            | expresion_binaria 
            | PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO
            | tipo_array
            | llamada_funcion 
            | acceso_arreglo;

identificador ::= IDENTIFICADOR;

llamada_funcion ::= identificador PARENTESIS_ABIERTO parametrosInv PARENTESIS_CERRADO 
                |identificador PARENTESIS_ABIERTO PARENTESIS_CERRADO ;

parametros ::= param | parametros COMA param;

param ::= tipo identificador;

tipo ::= INT | FLOAT | BOOL | CHAR | STRING;

parametrosInv ::= parametrosInv COMA paramInv
                 |paramInv;
                
paramInv ::= identificador | literal   ;

// Literales

literal ::=   literal_int
            | literal_float
            | literal_bool
            | literal_char
            | literal_string;

literal_int ::= LITERAL_INT;
literal_float ::= LITERAL_FLOAT;
literal_bool ::= TRUE | FALSE;
literal_char::= LITERAL_CHAR;
literal_string::= LITERAL_STRING;

tipo_array ::= INT identificador CORCHETE_ABIERTO ARRAY_NUMBER CORCHETE_CERRADO
            |CHAR identificador CORCHETE_ABIERTO ARRAY_NUMBER CORCHETE_CERRADO;

declaracion ::= tipo identificador declaracion_opcional DOLAR;

asignacion ::= identificador asignacion_opcional;

expresion_binaria ::= expresion operador expresion;
 
expresion_unaria ::= operador_unario expresion;

// Reglas para las expresiones unarias

operador_unario ::= INCREMENTO | DECREMENTO | RESTA ;

// operadores

operador ::= SUMA
            | RESTA
            | POTENCIA
            | MULTIPLICACION
            | MODULO
            | DIVISION;

operador_relacional ::= MENOR_QUE
                      | MENOR_IGUAL
                      | MAYOR_QUE
                      | MAYOR_IGUAL
                      | IGUALES
                      | DIFERENTES;
  

expresion_logica ::= negacion expresion_logica
                   | expresion_relacional operador_logico expresion_relacional
                   | expresion operador_relacional expresion
                   | PARENTESIS_ABIERTO expresion_logica PARENTESIS_CERRADO;

negacion ::= NEGACION; 

operador_logico ::= CONJUNCION
                   |DISYUNCION;

declaracion_opcional ::= IGUAL expresion 
                      | IGUAL lectura
                      | IGUAL escritura
                      | ;

asignacion_opcional ::= IGUAL expresion DOLAR
                      | IGUAL lectura DOLAR
                      | IGUAL escritura DOLAR
                      | IGUAL expresion_logica DOLAR
                      | ;