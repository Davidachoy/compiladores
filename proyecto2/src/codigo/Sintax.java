
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 08 14:09:43 CST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 08 14:09:43 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\004\000\002\002\005\000\002\027\004" +
    "\000\002\027\003\000\002\036\007\000\002\012\005\000" +
    "\002\003\004\000\002\004\007\000\002\013\004\000\002" +
    "\013\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\062\010\000\002\034\007\000\002\020\010" +
    "\000\002\050\010\000\002\050\004\000\002\050\002\000" +
    "\002\030\007\000\002\032\007\000\002\032\007\000\002" +
    "\035\011\000\002\031\004\000\002\031\004\000\002\031" +
    "\003\000\002\014\004\000\002\014\004\000\002\014\003" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\005\000\002\014\004\000\002" +
    "\014\004\000\002\037\005\000\002\037\006\000\002\040" +
    "\005\000\002\040\006\000\002\041\003\000\002\023\003" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\022\003\000\002\022\005\000\002\022\004\000\002" +
    "\043\003\000\002\043\005\000\002\021\003\000\002\021" +
    "\005\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\004\000\002\033\003\000\002\033\005\000" +
    "\002\033\003\000\002\051\006\000\002\007\003\000\002" +
    "\056\006\000\002\056\005\000\002\010\003\000\002\010" +
    "\005\000\002\010\002\000\002\011\004\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\057\005\000\002\057\003\000\002" +
    "\060\003\000\002\060\003\000\002\006\003\000\002\006" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\047\003\000" +
    "\002\052\003\000\002\053\003\000\002\053\003\000\002" +
    "\054\003\000\002\055\003\000\002\015\005\000\002\016" +
    "\004\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\026\003\000" +
    "\002\026\003\000\002\061\004\000\002\061\004\000\002" +
    "\061\004\000\002\061\002\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\014\004\004\005\015\006\005\007\016\010" +
    "\011\001\002\000\006\011\uffbb\037\321\001\002\000\004" +
    "\011\uffb9\001\002\000\016\002\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\001\002\000\016\002\000\004\025" +
    "\005\015\006\005\007\016\010\011\001\002\000\004\002" +
    "\317\001\002\000\004\011\uffb7\001\002\000\014\004\004" +
    "\005\015\006\005\007\016\010\011\001\002\000\004\011" +
    "\045\001\002\000\004\013\020\001\002\000\004\011\uffba" +
    "\001\002\000\004\011\uffb8\001\002\000\016\002\ufff8\004" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\001\002\000\034" +
    "\004\025\005\015\006\005\007\016\010\011\011\045\026" +
    "\030\032\047\033\032\034\026\035\022\036\043\043\040" +
    "\001\002\000\036\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\014\uffe2\026\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\035\uffe2\036\uffe2\043\uffe2\001\002\000\004\015\277\001" +
    "\002\000\004\063\276\001\002\000\004\011\045\001\002" +
    "\000\004\011\uffbb\001\002\000\032\011\045\015\100\020" +
    "\055\021\067\022\060\023\064\040\062\041\065\042\102" +
    "\053\121\064\115\065\120\001\002\000\036\004\025\005" +
    "\015\006\005\007\016\010\011\011\045\014\267\026\030" +
    "\032\047\033\032\034\026\035\022\036\043\043\040\001" +
    "\002\000\004\015\251\001\002\000\004\063\250\001\002" +
    "\000\004\013\020\001\002\000\004\063\241\001\002\000" +
    "\036\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\014\ufff5\026\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036" +
    "\ufff5\043\ufff5\001\002\000\036\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\014\ufff3\026\ufff3\032\ufff3\033" +
    "\ufff3\034\ufff3\035\ufff3\036\ufff3\043\ufff3\001\002\000\004" +
    "\063\240\001\002\000\004\063\237\001\002\000\004\063" +
    "\236\001\002\000\004\063\235\001\002\000\004\063\234" +
    "\001\002\000\004\015\226\001\002\000\036\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\014\ufff2\026\ufff2" +
    "\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\043\ufff2\001" +
    "\002\000\054\012\uffc2\015\uffc2\016\uffc2\017\uffc2\024\uffc2" +
    "\025\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\061\uffc2\062\uffc2\063\uffc2\001\002\000\036\004\ufff4\005" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\014\ufff4\026\ufff4" +
    "\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\043\ufff4\001" +
    "\002\000\004\015\173\001\002\000\012\015\054\017\053" +
    "\024\051\063\uff88\001\002\000\032\011\045\015\100\020" +
    "\055\021\067\022\060\023\064\040\062\041\065\042\102" +
    "\053\121\064\115\065\120\001\002\000\006\016\uffa4\063" +
    "\uffa4\001\002\000\036\011\045\015\100\020\055\021\067" +
    "\022\060\023\064\035\022\036\043\040\062\041\065\042" +
    "\102\053\121\064\115\065\120\001\002\000\022\011\045" +
    "\016\063\020\055\021\067\022\060\023\064\040\062\041" +
    "\065\001\002\000\046\012\uffab\016\uffab\025\uffab\044\uffab" +
    "\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053" +
    "\uffab\054\uffab\055\uffab\056\uffab\057\uffab\061\uffab\062\uffab" +
    "\063\uffab\001\002\000\006\012\uffb5\016\uffb5\001\002\000" +
    "\006\012\075\016\076\001\002\000\046\012\uffa7\016\uffa7" +
    "\025\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051" +
    "\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7" +
    "\061\uffa7\062\uffa7\063\uffa7\001\002\000\046\012\uffac\016" +
    "\uffac\025\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac" +
    "\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057" +
    "\uffac\061\uffac\062\uffac\063\uffac\001\002\000\046\012\uffa9" +
    "\016\uffa9\025\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050" +
    "\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9" +
    "\057\uffa9\061\uffa9\062\uffa9\063\uffa9\001\002\000\044\016" +
    "\uffc0\025\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0" +
    "\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057" +
    "\uffc0\061\uffc0\062\uffc0\063\uffc0\001\002\000\046\012\uffa6" +
    "\016\uffa6\025\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050" +
    "\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6" +
    "\057\uffa6\061\uffa6\062\uffa6\063\uffa6\001\002\000\046\012" +
    "\uffa8\016\uffa8\025\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8" +
    "\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056" +
    "\uffa8\057\uffa8\061\uffa8\062\uffa8\063\uffa8\001\002\000\046" +
    "\012\uffad\016\uffad\025\uffad\044\uffad\045\uffad\046\uffad\047" +
    "\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad" +
    "\056\uffad\057\uffad\061\uffad\062\uffad\063\uffad\001\002\000" +
    "\046\012\uffaa\016\uffaa\025\uffaa\044\uffaa\045\uffaa\046\uffaa" +
    "\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\056\uffaa\057\uffaa\061\uffaa\062\uffaa\063\uffaa\001\002" +
    "\000\046\012\uffaf\016\uffaf\025\uffaf\044\uffaf\045\uffaf\046" +
    "\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf" +
    "\055\uffaf\056\uffaf\057\uffaf\061\uffaf\062\uffaf\063\uffaf\001" +
    "\002\000\046\012\uffb0\016\uffb0\025\uffb0\044\uffb0\045\uffb0" +
    "\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\055\uffb0\056\uffb0\057\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\001\002\000\006\012\uffb3\016\uffb3\001\002\000\046\012" +
    "\uffae\016\uffae\025\uffae\044\uffae\045\uffae\046\uffae\047\uffae" +
    "\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056" +
    "\uffae\057\uffae\061\uffae\062\uffae\063\uffae\001\002\000\006" +
    "\012\uffb4\016\uffb4\001\002\000\020\011\045\020\055\021" +
    "\067\022\060\023\064\040\062\041\065\001\002\000\044" +
    "\016\uffc1\025\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1" +
    "\057\uffc1\061\uffc1\062\uffc1\063\uffc1\001\002\000\006\012" +
    "\uffb6\016\uffb6\001\002\000\032\011\045\015\100\020\055" +
    "\021\067\022\060\023\064\040\062\041\065\042\102\053" +
    "\121\064\115\065\120\001\002\000\006\016\uff8b\063\uff8b" +
    "\001\002\000\032\011\045\015\100\020\055\021\067\022" +
    "\060\023\064\040\062\041\065\042\102\053\121\064\115" +
    "\065\120\001\002\000\044\016\uffc6\025\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6" +
    "\054\uffc6\055\uffc6\056\uffc6\057\uffc6\061\uffc6\062\uffc6\063" +
    "\uffc6\001\002\000\044\016\uffd1\025\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\161\053\155\054" +
    "\154\055\162\056\160\057\157\061\uffd1\062\uffd1\063\uffd1" +
    "\001\002\000\030\016\uffd6\025\uffd6\044\136\045\143\046" +
    "\134\047\135\050\144\051\142\061\140\062\137\063\uffd6" +
    "\001\002\000\044\016\uffcc\025\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc" +
    "\055\uffcc\056\uffcc\057\uffcc\061\uffcc\062\uffcc\063\uffcc\001" +
    "\002\000\030\011\045\015\100\020\055\021\067\022\060" +
    "\023\064\040\062\041\065\053\121\064\115\065\120\001" +
    "\002\000\044\016\uffc8\025\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055" +
    "\uffc8\056\uffc8\057\uffc8\061\uffc8\062\uffc8\063\uffc8\001\002" +
    "\000\030\016\uffd5\025\uffd5\044\136\045\143\046\134\047" +
    "\135\050\144\051\142\061\140\062\137\063\uffd5\001\002" +
    "\000\044\016\uffce\025\uffce\044\uffce\045\uffce\046\uffce\047" +
    "\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\126\055\131" +
    "\056\130\057\uffce\061\uffce\062\uffce\063\uffce\001\002\000" +
    "\006\016\uff89\063\uff89\001\002\000\006\016\uff8a\063\uff8a" +
    "\001\002\000\030\011\uff94\015\uff94\020\uff94\021\uff94\022" +
    "\uff94\023\uff94\040\uff94\041\uff94\053\uff94\064\uff94\065\uff94" +
    "\001\002\000\044\016\uffca\025\uffca\044\uffca\045\uffca\046" +
    "\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca" +
    "\055\uffca\056\uffca\057\uffca\061\uffca\062\uffca\063\uffca\001" +
    "\002\000\044\016\uffc4\025\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055" +
    "\uffc4\056\uffc4\057\uffc4\061\uffc4\062\uffc4\063\uffc4\001\002" +
    "\000\030\011\uff93\015\uff93\020\uff93\021\uff93\022\uff93\023" +
    "\uff93\040\uff93\041\uff93\053\uff93\064\uff93\065\uff93\001\002" +
    "\000\030\011\uff92\015\uff92\020\uff92\021\uff92\022\uff92\023" +
    "\uff92\040\uff92\041\uff92\053\uff92\064\uff92\065\uff92\001\002" +
    "\000\050\015\054\016\uffc9\024\123\025\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9" +
    "\054\uffc9\055\uffc9\056\uffc9\057\uffc9\061\uffc9\062\uffc9\063" +
    "\uffc9\001\002\000\032\011\045\015\100\020\055\021\067" +
    "\022\060\023\064\040\062\041\065\042\102\053\121\064" +
    "\115\065\120\001\002\000\004\025\125\001\002\000\044" +
    "\016\uffc3\025\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3" +
    "\057\uffc3\061\uffc3\062\uffc3\063\uffc3\001\002\000\030\011" +
    "\uff9d\015\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\040\uff9d" +
    "\041\uff9d\053\uff9d\064\uff9d\065\uff9d\001\002\000\030\011" +
    "\045\015\100\020\055\021\067\022\060\023\064\040\062" +
    "\041\065\053\121\064\115\065\120\001\002\000\030\011" +
    "\uff9c\015\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\040\uff9c" +
    "\041\uff9c\053\uff9c\064\uff9c\065\uff9c\001\002\000\030\011" +
    "\uff9b\015\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\040\uff9b" +
    "\041\uff9b\053\uff9b\064\uff9b\065\uff9b\001\002\000\044\016" +
    "\uffcb\025\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb" +
    "\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057" +
    "\uffcb\061\uffcb\062\uffcb\063\uffcb\001\002\000\032\011\045" +
    "\015\100\020\055\021\067\022\060\023\064\040\062\041" +
    "\065\042\102\053\121\064\115\065\120\001\002\000\032" +
    "\011\uff98\015\uff98\020\uff98\021\uff98\022\uff98\023\uff98\040" +
    "\uff98\041\uff98\042\uff98\053\uff98\064\uff98\065\uff98\001\002" +
    "\000\032\011\uff97\015\uff97\020\uff97\021\uff97\022\uff97\023" +
    "\uff97\040\uff97\041\uff97\042\uff97\053\uff97\064\uff97\065\uff97" +
    "\001\002\000\032\011\uff9a\015\uff9a\020\uff9a\021\uff9a\022" +
    "\uff9a\023\uff9a\040\uff9a\041\uff9a\042\uff9a\053\uff9a\064\uff9a" +
    "\065\uff9a\001\002\000\032\011\uff90\015\uff90\020\uff90\021" +
    "\uff90\022\uff90\023\uff90\040\uff90\041\uff90\042\uff90\053\uff90" +
    "\064\uff90\065\uff90\001\002\000\032\011\uff91\015\uff91\020" +
    "\uff91\021\uff91\022\uff91\023\uff91\040\uff91\041\uff91\042\uff91" +
    "\053\uff91\064\uff91\065\uff91\001\002\000\032\011\045\015" +
    "\100\020\055\021\067\022\060\023\064\040\062\041\065" +
    "\042\102\053\121\064\115\065\120\001\002\000\032\011" +
    "\uff95\015\uff95\020\uff95\021\uff95\022\uff95\023\uff95\040\uff95" +
    "\041\uff95\042\uff95\053\uff95\064\uff95\065\uff95\001\002\000" +
    "\032\011\uff99\015\uff99\020\uff99\021\uff99\022\uff99\023\uff99" +
    "\040\uff99\041\uff99\042\uff99\053\uff99\064\uff99\065\uff99\001" +
    "\002\000\032\011\uff96\015\uff96\020\uff96\021\uff96\022\uff96" +
    "\023\uff96\040\uff96\041\uff96\042\uff96\053\uff96\064\uff96\065" +
    "\uff96\001\002\000\030\016\uffd3\025\uffd3\044\uffd3\045\uffd3" +
    "\046\uffd3\047\uffd3\050\uffd3\051\uffd3\061\140\062\137\063" +
    "\uffd3\001\002\000\030\016\uffd0\025\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\051\uffd0\061\140\062\137\063" +
    "\uffd0\001\002\000\044\016\uffc7\025\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054" +
    "\uffc7\055\uffc7\056\uffc7\057\uffc7\061\uffc7\062\uffc7\063\uffc7" +
    "\001\002\000\032\011\045\015\100\020\055\021\067\022" +
    "\060\023\064\040\062\041\065\042\102\053\121\064\115" +
    "\065\120\001\002\000\032\011\045\015\100\020\055\021" +
    "\067\022\060\023\064\040\062\041\065\042\102\053\121" +
    "\064\115\065\120\001\002\000\030\016\uffd2\025\uffd2\044" +
    "\136\045\143\046\134\047\135\050\144\051\142\061\140" +
    "\062\137\063\uffd2\001\002\000\030\016\uffd4\025\uffd4\044" +
    "\136\045\143\046\134\047\135\050\144\051\142\061\140" +
    "\062\137\063\uffd4\001\002\000\030\011\uffa0\015\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\040\uffa0\041\uffa0\053\uffa0" +
    "\064\uffa0\065\uffa0\001\002\000\030\011\uffa2\015\uffa2\020" +
    "\uffa2\021\uffa2\022\uffa2\023\uffa2\040\uffa2\041\uffa2\053\uffa2" +
    "\064\uffa2\065\uffa2\001\002\000\030\011\045\015\100\020" +
    "\055\021\067\022\060\023\064\040\062\041\065\053\121" +
    "\064\115\065\120\001\002\000\030\011\uffa1\015\uffa1\020" +
    "\uffa1\021\uffa1\022\uffa1\023\uffa1\040\uffa1\041\uffa1\053\uffa1" +
    "\064\uffa1\065\uffa1\001\002\000\030\011\uff9f\015\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\040\uff9f\041\uff9f\053\uff9f" +
    "\064\uff9f\065\uff9f\001\002\000\030\011\uffa3\015\uffa3\020" +
    "\uffa3\021\uffa3\022\uffa3\023\uffa3\040\uffa3\041\uffa3\053\uffa3" +
    "\064\uffa3\065\uffa3\001\002\000\030\011\uff9e\015\uff9e\020" +
    "\uff9e\021\uff9e\022\uff9e\023\uff9e\040\uff9e\041\uff9e\053\uff9e" +
    "\064\uff9e\065\uff9e\001\002\000\044\016\uffcd\025\uffcd\044" +
    "\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd" +
    "\053\uffcd\054\126\055\131\056\130\057\uffcd\061\uffcd\062" +
    "\uffcd\063\uffcd\001\002\000\030\016\uffcf\025\uffcf\044\uffcf" +
    "\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\061\140\062" +
    "\137\063\uffcf\001\002\000\004\016\166\001\002\000\044" +
    "\016\uffc5\025\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5" +
    "\057\uffc5\061\uffc5\062\uffc5\063\uffc5\001\002\000\004\025" +
    "\170\001\002\000\004\017\171\001\002\000\032\011\045" +
    "\015\100\020\055\021\067\022\060\023\064\040\062\041" +
    "\065\042\102\053\121\064\115\065\120\001\002\000\004" +
    "\063\ufff1\001\002\000\016\004\025\005\015\006\005\007" +
    "\016\010\011\011\045\001\002\000\004\016\224\001\002" +
    "\000\004\063\220\001\002\000\004\063\207\001\002\000" +
    "\004\011\045\001\002\000\010\016\uff88\017\053\063\uff88" +
    "\001\002\000\006\017\202\063\uff8c\001\002\000\036\011" +
    "\045\015\100\020\055\021\067\022\060\023\064\035\022" +
    "\036\043\040\062\041\065\042\102\053\121\064\115\065" +
    "\120\001\002\000\004\063\uffa5\001\002\000\004\063\uff8f" +
    "\001\002\000\004\063\uff8d\001\002\000\004\063\uff8e\001" +
    "\002\000\032\011\045\015\100\020\055\021\067\022\060" +
    "\023\064\040\062\041\065\042\102\053\121\064\115\065" +
    "\120\001\002\000\024\044\136\045\143\046\134\047\135" +
    "\050\144\051\142\061\140\062\137\063\211\001\002\000" +
    "\010\011\045\064\215\065\212\001\002\000\004\011\045" +
    "\001\002\000\004\016\uffe9\001\002\000\004\016\uffe5\001" +
    "\002\000\004\011\045\001\002\000\004\016\uffe7\001\002" +
    "\000\004\016\uffe6\001\002\000\032\011\045\015\100\020" +
    "\055\021\067\022\060\023\064\040\062\041\065\042\102" +
    "\053\121\064\115\065\120\001\002\000\024\044\136\045" +
    "\143\046\134\047\135\050\144\051\142\061\140\062\137" +
    "\063\222\001\002\000\010\011\045\064\215\065\212\001" +
    "\002\000\004\016\uffea\001\002\000\004\013\020\001\002" +
    "\000\036\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\014\uffeb\026\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\043\uffeb\001\002\000\022\011\045\016\230\020" +
    "\055\021\067\022\060\023\064\040\062\041\065\001\002" +
    "\000\004\016\233\001\002\000\006\016\uffd8\063\uffd8\001" +
    "\002\000\004\016\uffb1\001\002\000\004\016\uffb2\001\002" +
    "\000\006\016\uffd7\063\uffd7\001\002\000\036\004\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\014\uffe1\026\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\043\uffe1\001" +
    "\002\000\036\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0" +
    "\011\uffe0\014\uffe0\026\uffe0\032\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\043\uffe0\001\002\000\036\004\uffdb\005\uffdb" +
    "\006\uffdb\007\uffdb\010\uffdb\011\uffdb\014\uffdb\026\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\043\uffdb\001\002" +
    "\000\036\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011" +
    "\uffde\014\uffde\026\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\043\uffde\001\002\000\036\004\uffdc\005\uffdc\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\014\uffdc\026\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\036\uffdc\043\uffdc\001\002\000" +
    "\036\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4" +
    "\014\uffe4\026\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\043\uffe4\001\002\000\004\031\243\001\002\000\004" +
    "\015\244\001\002\000\032\011\045\015\100\020\055\021" +
    "\067\022\060\023\064\040\062\041\065\042\102\053\121" +
    "\064\115\065\120\001\002\000\024\016\246\044\136\045" +
    "\143\046\134\047\135\050\144\051\142\061\140\062\137" +
    "\001\002\000\004\063\247\001\002\000\036\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\014\uffe8\026\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\043\uffe8\001" +
    "\002\000\036\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3" +
    "\011\uffe3\014\uffe3\026\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\043\uffe3\001\002\000\032\011\045\015\100" +
    "\020\055\021\067\022\060\023\064\040\062\041\065\042" +
    "\102\053\121\064\115\065\120\001\002\000\024\016\253" +
    "\044\136\045\143\046\134\047\135\050\144\051\142\061" +
    "\140\062\137\001\002\000\004\013\020\001\002\000\042" +
    "\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\014" +
    "\uffec\026\uffec\027\257\030\255\032\uffec\033\uffec\034\uffec" +
    "\035\uffec\036\uffec\043\uffec\001\002\000\004\013\020\001" +
    "\002\000\036\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\011\uffef\014\uffef\026\uffef\032\uffef\033\uffef\034\uffef\035" +
    "\uffef\036\uffef\043\uffef\001\002\000\004\015\260\001\002" +
    "\000\032\011\045\015\100\020\055\021\067\022\060\023" +
    "\064\040\062\041\065\042\102\053\121\064\115\065\120" +
    "\001\002\000\024\016\262\044\136\045\143\046\134\047" +
    "\135\050\144\051\142\061\140\062\137\001\002\000\004" +
    "\013\020\001\002\000\042\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\014\uffec\026\uffec\027\257\030\255" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\043\uffec\001" +
    "\002\000\036\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee" +
    "\011\uffee\014\uffee\026\uffee\032\uffee\033\uffee\034\uffee\035" +
    "\uffee\036\uffee\043\uffee\001\002\000\036\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\011\uffed\014\uffed\026\uffed\032" +
    "\uffed\033\uffed\034\uffed\035\uffed\036\uffed\043\uffed\001\002" +
    "\000\036\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\014\ufff6\026\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6" +
    "\036\ufff6\043\ufff6\001\002\000\046\002\ufff9\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\014\ufff9\026\ufff9" +
    "\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035" +
    "\ufff9\036\ufff9\043\ufff9\001\002\000\004\063\271\001\002" +
    "\000\036\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\014\uffdd\026\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\043\uffdd\001\002\000\010\017\202\024\273\063" +
    "\uff8c\001\002\000\032\011\045\015\100\020\055\021\067" +
    "\022\060\023\064\040\062\041\065\042\102\053\121\064" +
    "\115\065\120\001\002\000\004\025\275\001\002\000\004" +
    "\063\ufff0\001\002\000\036\004\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\014\uffdf\026\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\043\uffdf\001\002\000\022\011" +
    "\045\016\301\020\055\021\067\022\060\023\064\040\062" +
    "\041\065\001\002\000\004\016\302\001\002\000\006\016" +
    "\uffda\063\uffda\001\002\000\006\016\uffd9\063\uffd9\001\002" +
    "\000\004\015\304\001\002\000\020\004\025\005\015\006" +
    "\005\007\016\010\011\012\uffbd\016\uffbd\001\002\000\006" +
    "\012\311\016\312\001\002\000\004\011\045\001\002\000" +
    "\006\012\uffbf\016\uffbf\001\002\000\006\012\uffbc\016\uffbc" +
    "\001\002\000\014\004\025\005\015\006\005\007\016\010" +
    "\011\001\002\000\004\013\ufff7\001\002\000\006\012\uffbe" +
    "\016\uffbe\001\002\000\016\002\ufffc\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\010\ufffc\001\002\000\016\002\ufffe\004\025" +
    "\005\015\006\005\007\016\010\011\001\002\000\016\002" +
    "\ufffd\004\025\005\015\006\005\007\016\010\011\001\002" +
    "\000\004\002\001\001\002\000\016\002\uffff\004\025\005" +
    "\015\006\005\007\016\010\011\001\002\000\004\015\322" +
    "\001\002\000\004\016\323\001\002\000\004\013\020\001" +
    "\002\000\016\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\016\002\007\003\005\004\013\005\012\027" +
    "\011\036\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\005\004\013\005\012\027" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\313\004\013\005\012\036\314\001\001\000\004\007" +
    "\302\001\001\000\004\012\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\005\023\007" +
    "\047\013\026\014\033\015\032\016\030\017\020\020\045" +
    "\030\043\034\035\035\034\037\041\040\040\056\036\062" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\271\001\001\000\002\001\001\000" +
    "\044\007\121\021\111\022\110\023\104\033\105\041\267" +
    "\042\102\043\103\044\106\046\115\047\070\051\116\052" +
    "\067\053\072\054\065\055\060\056\107\001\001\000\036" +
    "\005\023\007\047\014\265\015\032\016\030\017\020\020" +
    "\045\030\043\034\035\035\034\037\041\040\040\056\036" +
    "\062\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\241\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\051\001\001\000\044" +
    "\007\121\021\111\022\110\023\104\033\105\041\166\042" +
    "\102\043\103\044\106\046\115\047\070\051\116\052\067" +
    "\053\072\054\065\055\060\056\107\001\001\000\002\001" +
    "\001\000\050\007\121\021\111\022\110\023\104\033\105" +
    "\037\113\040\112\041\100\042\102\043\103\044\106\046" +
    "\115\047\070\051\116\052\067\053\072\054\065\055\060" +
    "\056\107\001\001\000\024\007\073\046\071\047\070\052" +
    "\067\053\072\054\065\055\060\057\056\060\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\073\046\071\047\070\052\067\053\072\054\065" +
    "\055\060\060\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\007\121\021\111\022\110\023\104\033\105" +
    "\041\164\042\102\043\103\044\106\046\115\047\070\051" +
    "\116\052\067\053\072\054\065\055\060\056\107\001\001" +
    "\000\002\001\001\000\040\007\121\021\111\022\163\033" +
    "\105\042\102\043\103\044\106\046\115\047\070\051\116" +
    "\052\067\053\072\054\065\055\060\056\107\001\001\000" +
    "\002\001\001\000\004\045\155\001\001\000\006\026\147" +
    "\063\150\001\001\000\002\001\001\000\032\007\121\033" +
    "\146\042\102\044\106\046\115\047\070\051\116\052\067" +
    "\053\072\054\065\055\060\056\107\001\001\000\002\001" +
    "\001\000\006\026\132\063\140\001\001\000\004\024\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\007\121\021" +
    "\111\022\110\023\104\033\105\041\123\042\102\043\103" +
    "\044\106\046\115\047\070\051\116\052\067\053\072\054" +
    "\065\055\060\056\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\121\033\131\042" +
    "\102\044\106\046\115\047\070\051\116\052\067\053\072" +
    "\054\065\055\060\056\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\007\121\021\111" +
    "\022\145\033\105\042\102\043\103\044\106\046\115\047" +
    "\070\051\116\052\067\053\072\054\065\055\060\056\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\007\121" +
    "\021\111\022\144\033\105\042\102\043\103\044\106\046" +
    "\115\047\070\051\116\052\067\053\072\054\065\055\060" +
    "\056\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\132\001\001\000\004\026\132" +
    "\001\001\000\002\001\001\000\042\007\121\021\111\022" +
    "\110\023\152\033\105\042\102\043\103\044\106\046\115" +
    "\047\070\051\116\052\067\053\072\054\065\055\060\056" +
    "\107\001\001\000\042\007\121\021\111\022\110\023\151" +
    "\033\105\042\102\043\103\044\106\046\115\047\070\051" +
    "\116\052\067\053\072\054\065\055\060\056\107\001\001" +
    "\000\006\026\147\063\150\001\001\000\006\026\147\063" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\007\121\021\162\033\105\042\102\044\106\046\115\047" +
    "\070\051\116\052\067\053\072\054\065\055\060\056\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\126\001\001\000\004" +
    "\026\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\007\121\021\111" +
    "\022\110\023\104\033\105\041\171\042\102\043\103\044" +
    "\106\046\115\047\070\051\116\052\067\053\072\054\065" +
    "\055\060\056\107\001\001\000\002\001\001\000\014\005" +
    "\176\007\177\015\175\016\174\032\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\200\001\001\000\004\025\051\001\001\000\004\061\202" +
    "\001\001\000\050\007\121\021\111\022\110\023\104\033" +
    "\105\037\205\040\204\041\203\042\102\043\103\044\106" +
    "\046\115\047\070\051\116\052\067\053\072\054\065\055" +
    "\060\056\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\007\121\021" +
    "\111\022\110\023\207\033\105\042\102\043\103\044\106" +
    "\046\115\047\070\051\116\052\067\053\072\054\065\055" +
    "\060\056\107\001\001\000\006\026\147\063\150\001\001" +
    "\000\010\007\177\016\213\031\212\001\001\000\004\007" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\007\121\021\111\022\110\023\220\033\105\042\102" +
    "\043\103\044\106\046\115\047\070\051\116\052\067\053" +
    "\072\054\065\055\060\056\107\001\001\000\006\026\147" +
    "\063\150\001\001\000\010\007\177\016\213\031\222\001" +
    "\001\000\002\001\001\000\004\012\224\001\001\000\002" +
    "\001\001\000\022\006\226\007\231\046\230\047\070\052" +
    "\067\053\072\054\065\055\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\007\121" +
    "\021\111\022\110\023\244\033\105\042\102\043\103\044" +
    "\106\046\115\047\070\051\116\052\067\053\072\054\065" +
    "\055\060\056\107\001\001\000\006\026\147\063\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\007\121\021\111\022\110\023\251\033\105\042" +
    "\102\043\103\044\106\046\115\047\070\051\116\052\067" +
    "\053\072\054\065\055\060\056\107\001\001\000\006\026" +
    "\147\063\150\001\001\000\004\012\253\001\001\000\004" +
    "\050\255\001\001\000\004\012\264\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\007\121\021\111\022\110" +
    "\023\260\033\105\042\102\043\103\044\106\046\115\047" +
    "\070\051\116\052\067\053\072\054\065\055\060\056\107" +
    "\001\001\000\006\026\147\063\150\001\001\000\004\012" +
    "\262\001\001\000\004\050\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\202\001\001" +
    "\000\044\007\121\021\111\022\110\023\104\033\105\041" +
    "\273\042\102\043\103\044\106\046\115\047\070\051\116" +
    "\052\067\053\072\054\065\055\060\056\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\277\007\231\046\230\047\070\052\067\053\072\054" +
    "\065\055\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\305\010" +
    "\304\011\306\001\001\000\002\001\001\000\004\007\307" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\305\011\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\005\004\013\005\012\027" +
    "\315\001\001\000\010\003\313\004\013\005\012\001\001" +
    "\000\002\001\001\000\010\003\313\004\013\005\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\323" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    // Método que se invoca cuando ocurre un error de sintaxis
    public void syntax_error(Symbol s){
        this.s = s;
        System.err.println("Error de sintaxis en la línea " + s.left + ", columna " + s.right + ": se encontró " + s.value);
    }

    // Devuelve el símbolo actual
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // asignacion_opcional ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_opcional",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // asignacion_opcional ::= IGUAL escritura 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_opcional",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // asignacion_opcional ::= IGUAL lectura 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_opcional",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // asignacion_opcional ::= IGUAL expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_opcional",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // declaracion_opcional ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_opcional",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // declaracion_opcional ::= IGUAL escritura 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_opcional",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // declaracion_opcional ::= IGUAL lectura 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_opcional",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // declaracion_opcional ::= IGUAL expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_opcional",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operador_logico ::= DISYUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_logico",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operador_logico ::= CONJUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_logico",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operador_unario ::= RESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_unario",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operador_unario ::= DECREMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_unario",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operador_unario ::= INCREMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_unario",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operador_relacional ::= DIFERENTES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operador_relacional ::= IGUALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operador_relacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operador_relacional ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operador_relacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operador_relacional ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // op_mult ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_mult",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // op_mult ::= MODULO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_mult",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // op_mult ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_mult",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operador_binario ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_binario",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operador_binario ::= MODULO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_binario",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operador_binario ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_binario",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operador_binario ::= POTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_binario",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operador_binario ::= RESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_binario",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operador_binario ::= SUMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_binario",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // asignacion ::= identificador asignacion_opcional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // declaracion ::= tipo identificador declaracion_opcional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // literal_string ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_string",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // literal_char ::= LITERAL_CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_char",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // literal_bool ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_bool",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literal_bool ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_bool",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // literal_float ::= LITERAL_FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_float",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // literal_int ::= LITERAL_INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_int",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // literal ::= literal_string 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // literal ::= literal_char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // literal ::= literal_bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // literal ::= literal_float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // literal ::= literal_int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // identi_liter ::= literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("identi_liter",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // identi_liter ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("identi_liter",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // paramInv ::= literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramInv",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // paramInv ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramInv",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parametrosInv ::= paramInv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametrosInv",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametrosInv ::= parametrosInv COMA paramInv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametrosInv",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipo ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // param ::= tipo identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parametros ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parametros ::= parametros COMA param 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametros ::= param 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // llamada_funcion ::= identificador PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("llamada_funcion",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // llamada_funcion ::= identificador PARENTESIS_ABIERTO parametrosInv PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("llamada_funcion",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // identificador ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("identificador",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // array_expr ::= identificador CORCHETE_ABIERTO expresion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("array_expr",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= array_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= expresion_unaria 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= operador_unario factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= term op_mult factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("term",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("term",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion_binaria ::= expresion_binaria operador_binario term 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_binaria",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion_binaria ::= term 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_binaria",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion_logica ::= NEGACION expresion_logica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion_logica ::= expresion_logica operador_logico expresion_logica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion_logica ::= expresion_binaria 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion_relacional ::= expresion_relacional operador_relacional expresion_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion_relacional ::= expresion_logica operador_relacional expresion_logica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion_relacional ::= expresion_relacional operador_logico expresion_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion_relacional ::= expresion_logica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= expresion_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // escritura ::= PRINT PARENTESIS_ABIERTO identi_liter PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("escritura",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // escritura ::= PRINT PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("escritura",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lectura ::= READ PARENTESIS_ABIERTO identi_liter PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lectura",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lectura ::= READ PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lectura",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= BREAK DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= declaracion_arreglo DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= RETURN expresion DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= llamada_funcion DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= asignacion_arreglo DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= escritura DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= lectura DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= estructura_control 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= asignacion DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= declaracion DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inc_for ::= asignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inc_for",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inc_for ::= DECREMENTO identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inc_for",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inc_for ::= INCREMENTO identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inc_for",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion_do_while ::= DO cuerpo_funcion WHILE PARENTESIS_ABIERTO expresion_relacional PARENTESIS_CERRADO DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_do_while",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // condicion_for ::= declaracion DOLAR expresion_relacional DOLAR inc_for 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_for",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // condicion_for ::= asignacion DOLAR expresion_relacional DOLAR inc_for 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_for",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracion_for ::= FOR PARENTESIS_ABIERTO condicion_for PARENTESIS_CERRADO cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // else_parte ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("else_parte",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // else_parte ::= ELSE cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("else_parte",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // else_parte ::= ELIF PARENTESIS_ABIERTO expresion_relacional PARENTESIS_CERRADO cuerpo_funcion else_parte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("else_parte",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion_if ::= IF PARENTESIS_ABIERTO expresion_relacional PARENTESIS_CERRADO cuerpo_funcion else_parte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_if",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion_arreglo ::= tipo identificador CORCHETE_ABIERTO expresion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // asignacion_arreglo ::= identificador CORCHETE_ABIERTO expresion CORCHETE_CERRADO IGUAL expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // estructura_control ::= declaracion_for 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_control",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // estructura_control ::= declaracion_do_while 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_control",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // estructura_control ::= declaracion_if 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_control",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bloque ::= sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloque",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloque ::= bloque sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloque",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // nombre_funcion ::= tipo identificador PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nombre_funcion",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcion ::= nombre_funcion cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funcion",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo_funcion ::= LLAVE_ABIERTA bloque LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // main ::= INT MAIN PARENTESIS_ABIERTO PARENTESIS_CERRADO cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("main",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funciones",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funciones",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= funciones main funciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= funciones main 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= main funciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= main 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

