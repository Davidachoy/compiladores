
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 29 21:25:29 CST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 29 21:25:29 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\004\000\002\002\005\000\002\032\004" +
    "\000\002\032\003\000\002\041\006\000\002\023\004\000" +
    "\002\012\005\000\002\003\004\000\002\067\004\000\002" +
    "\004\006\000\002\014\003\000\002\014\004\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\065\010" +
    "\000\002\037\007\000\002\021\013\000\002\013\002\000" +
    "\002\053\010\000\002\053\004\000\002\053\002\000\002" +
    "\033\007\000\002\035\007\000\002\035\007\000\002\040" +
    "\011\000\002\034\004\000\002\034\004\000\002\034\003" +
    "\000\002\015\003\000\002\015\004\000\002\015\003\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\004\000\002\015\005\000\002\015\004\000\002\015" +
    "\004\000\002\042\005\000\002\042\006\000\002\043\005" +
    "\000\002\043\006\000\002\044\003\000\002\025\003\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\024\003\000\002\024\005\000\002\024\004\000\002\046" +
    "\003\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\022\003\000\002\022\005\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\004\000\002\036\003\000\002\036\005\000" +
    "\002\036\003\000\002\054\006\000\002\007\003\000\002" +
    "\061\006\000\002\061\005\000\002\010\003\000\002\010" +
    "\005\000\002\010\002\000\002\011\004\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\062\005\000\002\062\003\000\002" +
    "\063\003\000\002\063\003\000\002\006\003\000\002\006" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\052\003\000" +
    "\002\055\003\000\002\056\003\000\002\056\003\000\002" +
    "\057\003\000\002\060\003\000\002\016\006\000\002\016" +
    "\006\000\002\016\006\000\002\016\004\000\002\027\004" +
    "\000\002\017\004\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\066\003\000\002\066\003\000\002" +
    "\066\003\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\031\003\000\002\031\003\000\002\030\004\000" +
    "\002\030\004\000\002\030\004\000\002\030\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\014\004\004\005\017\006\006\007\020\010" +
    "\013\001\002\000\006\011\uffae\037\347\001\002\000\004" +
    "\015\337\001\002\000\004\011\uffac\001\002\000\016\002" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\001\002" +
    "\000\016\002\000\004\027\005\017\006\006\007\020\010" +
    "\013\001\002\000\004\015\333\001\002\000\004\002\332" +
    "\001\002\000\004\011\uffaa\001\002\000\014\004\004\005" +
    "\017\006\006\007\020\010\013\001\002\000\004\011\326" +
    "\001\002\000\004\013\022\001\002\000\004\011\uffad\001" +
    "\002\000\004\011\uffab\001\002\000\016\002\ufff7\004\ufff7" +
    "\005\ufff7\006\ufff7\007\ufff7\010\ufff7\001\002\000\034\004" +
    "\027\005\017\006\006\007\020\010\013\011\047\026\uffec" +
    "\032\051\033\034\034\030\035\024\036\045\043\042\001" +
    "\002\000\036\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\014\uffdf\026\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\043\uffdf\001\002\000\004\015\322\001\002" +
    "\000\004\063\321\001\002\000\004\011\315\001\002\000" +
    "\004\011\uffae\001\002\000\032\011\075\015\102\020\120" +
    "\021\125\022\121\023\124\040\106\041\117\042\104\053" +
    "\126\064\116\065\123\001\002\000\004\026\272\001\002" +
    "\000\036\004\027\005\017\006\006\007\020\010\013\011" +
    "\047\014\271\026\uffec\032\051\033\034\034\030\035\024" +
    "\036\045\043\042\001\002\000\004\063\267\001\002\000" +
    "\004\013\022\001\002\000\036\004\uffe1\005\uffe1\006\uffe1" +
    "\007\uffe1\010\uffe1\011\uffe1\014\uffe1\026\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\043\uffe1\001\002\000\036" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\014" +
    "\ufff4\026\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4" +
    "\043\ufff4\001\002\000\036\004\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\014\ufff1\026\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\043\ufff1\001\002\000\004\063" +
    "\260\001\002\000\004\063\257\001\002\000\004\063\256" +
    "\001\002\000\004\063\255\001\002\000\004\063\254\001" +
    "\002\000\004\015\246\001\002\000\036\004\ufff0\005\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\011\ufff0\014\ufff0\026\ufff0\032" +
    "\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\043\ufff0\001\002" +
    "\000\012\015\uffb5\017\222\024\uffb5\063\uff81\001\002\000" +
    "\036\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2" +
    "\014\ufff2\026\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036" +
    "\ufff2\043\ufff2\001\002\000\004\015\213\001\002\000\006" +
    "\017\204\063\203\001\002\000\006\015\055\024\054\001" +
    "\002\000\032\011\075\015\102\020\120\021\125\022\121" +
    "\023\124\040\106\041\117\042\104\053\126\064\116\065" +
    "\123\001\002\000\022\011\075\016\064\020\056\021\067" +
    "\022\061\023\065\040\063\041\066\001\002\000\006\012" +
    "\uff9e\016\uff9e\001\002\000\006\012\uffa8\016\uffa8\001\002" +
    "\000\006\012\077\016\100\001\002\000\006\012\uff9a\016" +
    "\uff9a\001\002\000\006\012\uff9f\016\uff9f\001\002\000\006" +
    "\012\uff9c\016\uff9c\001\002\000\044\016\uffb3\025\uffb3\044" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\061\uffb3\062" +
    "\uffb3\063\uffb3\001\002\000\006\012\uff99\016\uff99\001\002" +
    "\000\006\012\uff9b\016\uff9b\001\002\000\006\012\uff9d\016" +
    "\uff9d\001\002\000\006\012\uffa2\016\uffa2\001\002\000\006" +
    "\012\uffa0\016\uffa0\001\002\000\006\012\uffa3\016\uffa3\001" +
    "\002\000\006\012\uffa6\016\uffa6\001\002\000\006\012\uffa1" +
    "\016\uffa1\001\002\000\052\012\uffb5\015\uffb5\016\uffb5\024" +
    "\uffb5\025\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5" +
    "\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057" +
    "\uffb5\061\uffb5\062\uffb5\063\uffb5\001\002\000\006\012\uffa7" +
    "\016\uffa7\001\002\000\020\011\075\020\056\021\067\022" +
    "\061\023\065\040\063\041\066\001\002\000\044\016\uffb4" +
    "\025\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051" +
    "\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4" +
    "\061\uffb4\062\uffb4\063\uffb4\001\002\000\006\012\uffa9\016" +
    "\uffa9\001\002\000\032\011\075\015\102\020\120\021\125" +
    "\022\121\023\124\040\106\041\117\042\104\053\126\064" +
    "\116\065\123\001\002\000\004\025\176\001\002\000\032" +
    "\011\075\015\102\020\120\021\125\022\121\023\124\040" +
    "\106\041\117\042\104\053\126\064\116\065\123\001\002" +
    "\000\044\016\uffb9\025\uffb9\044\uffb9\045\uffb9\046\uffb9\047" +
    "\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9" +
    "\056\uffb9\057\uffb9\061\uffb9\062\uffb9\063\uffb9\001\002\000" +
    "\044\016\uffc0\025\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\061\uffc0\062\uffc0\063\uffc0\001\002\000\044" +
    "\016\uffce\025\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\051\uffce\052\165\053\162\054\161\055\166\056\164" +
    "\057\163\061\uffce\062\uffce\063\uffce\001\002\000\030\016" +
    "\uffd3\025\uffd3\044\143\045\150\046\141\047\142\050\151" +
    "\051\147\061\145\062\144\063\uffd3\001\002\000\044\016" +
    "\uffc4\025\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057" +
    "\uffc4\061\uffc4\062\uffc4\063\uffc4\001\002\000\044\016\uffbb" +
    "\025\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\061\uffbb\062\uffbb\063\uffbb\001\002\000\030\011\075\015" +
    "\102\020\120\021\125\022\121\023\124\040\106\041\117" +
    "\053\126\064\116\065\123\001\002\000\030\016\uffd2\025" +
    "\uffd2\044\143\045\150\046\141\047\142\050\151\051\147" +
    "\061\145\062\144\063\uffd2\001\002\000\044\016\uffcb\025" +
    "\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\054\133\055\136\056\135\057\uffcb\061" +
    "\uffcb\062\uffcb\063\uffcb\001\002\000\030\011\uff89\015\uff89" +
    "\020\uff89\021\uff89\022\uff89\023\uff89\040\uff89\041\uff89\053" +
    "\uff89\064\uff89\065\uff89\001\002\000\044\016\uffbf\025\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\061\uffbf" +
    "\062\uffbf\063\uffbf\001\002\000\044\016\uffc2\025\uffc2\044" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\061\uffc2\062" +
    "\uffc2\063\uffc2\001\002\000\044\016\uffbe\025\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\061\uffbe\062\uffbe" +
    "\063\uffbe\001\002\000\044\016\uffb7\025\uffb7\044\uffb7\045" +
    "\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7" +
    "\054\uffb7\055\uffb7\056\uffb7\057\uffb7\061\uffb7\062\uffb7\063" +
    "\uffb7\001\002\000\030\011\uff88\015\uff88\020\uff88\021\uff88" +
    "\022\uff88\023\uff88\040\uff88\041\uff88\053\uff88\064\uff88\065" +
    "\uff88\001\002\000\044\016\uffbd\025\uffbd\044\uffbd\045\uffbd" +
    "\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054" +
    "\uffbd\055\uffbd\056\uffbd\057\uffbd\061\uffbd\062\uffbd\063\uffbd" +
    "\001\002\000\044\016\uffc1\025\uffc1\044\uffc1\045\uffc1\046" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\061\uffc1\062\uffc1\063\uffc1\001" +
    "\002\000\030\011\uff87\015\uff87\020\uff87\021\uff87\022\uff87" +
    "\023\uff87\040\uff87\041\uff87\053\uff87\064\uff87\065\uff87\001" +
    "\002\000\050\015\055\016\uffbc\024\130\025\uffbc\044\uffbc" +
    "\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053" +
    "\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\061\uffbc\062\uffbc" +
    "\063\uffbc\001\002\000\032\011\075\015\102\020\120\021" +
    "\125\022\121\023\124\040\106\041\117\042\104\053\126" +
    "\064\116\065\123\001\002\000\004\025\132\001\002\000" +
    "\044\016\uffb6\025\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\061\uffb6\062\uffb6\063\uffb6\001\002\000\030" +
    "\011\uff92\015\uff92\020\uff92\021\uff92\022\uff92\023\uff92\040" +
    "\uff92\041\uff92\053\uff92\064\uff92\065\uff92\001\002\000\030" +
    "\011\075\015\102\020\120\021\125\022\121\023\124\040" +
    "\106\041\117\053\126\064\116\065\123\001\002\000\030" +
    "\011\uff91\015\uff91\020\uff91\021\uff91\022\uff91\023\uff91\040" +
    "\uff91\041\uff91\053\uff91\064\uff91\065\uff91\001\002\000\030" +
    "\011\uff90\015\uff90\020\uff90\021\uff90\022\uff90\023\uff90\040" +
    "\uff90\041\uff90\053\uff90\064\uff90\065\uff90\001\002\000\044" +
    "\016\uffc3\025\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3" +
    "\057\uffc3\061\uffc3\062\uffc3\063\uffc3\001\002\000\032\011" +
    "\075\015\102\020\120\021\125\022\121\023\124\040\106" +
    "\041\117\042\104\053\126\064\116\065\123\001\002\000" +
    "\032\011\uff8d\015\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d" +
    "\040\uff8d\041\uff8d\042\uff8d\053\uff8d\064\uff8d\065\uff8d\001" +
    "\002\000\032\011\uff8c\015\uff8c\020\uff8c\021\uff8c\022\uff8c" +
    "\023\uff8c\040\uff8c\041\uff8c\042\uff8c\053\uff8c\064\uff8c\065" +
    "\uff8c\001\002\000\032\011\uff8f\015\uff8f\020\uff8f\021\uff8f" +
    "\022\uff8f\023\uff8f\040\uff8f\041\uff8f\042\uff8f\053\uff8f\064" +
    "\uff8f\065\uff8f\001\002\000\032\011\uff85\015\uff85\020\uff85" +
    "\021\uff85\022\uff85\023\uff85\040\uff85\041\uff85\042\uff85\053" +
    "\uff85\064\uff85\065\uff85\001\002\000\032\011\uff86\015\uff86" +
    "\020\uff86\021\uff86\022\uff86\023\uff86\040\uff86\041\uff86\042" +
    "\uff86\053\uff86\064\uff86\065\uff86\001\002\000\032\011\075" +
    "\015\102\020\120\021\125\022\121\023\124\040\106\041" +
    "\117\042\104\053\126\064\116\065\123\001\002\000\032" +
    "\011\uff8a\015\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\040" +
    "\uff8a\041\uff8a\042\uff8a\053\uff8a\064\uff8a\065\uff8a\001\002" +
    "\000\032\011\uff8e\015\uff8e\020\uff8e\021\uff8e\022\uff8e\023" +
    "\uff8e\040\uff8e\041\uff8e\042\uff8e\053\uff8e\064\uff8e\065\uff8e" +
    "\001\002\000\032\011\uff8b\015\uff8b\020\uff8b\021\uff8b\022" +
    "\uff8b\023\uff8b\040\uff8b\041\uff8b\042\uff8b\053\uff8b\064\uff8b" +
    "\065\uff8b\001\002\000\030\016\uffd0\025\uffd0\044\uffd0\045" +
    "\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\061\145\062\144" +
    "\063\uffd0\001\002\000\030\016\uffcd\025\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\061\145\062\144" +
    "\063\uffcd\001\002\000\044\016\uffba\025\uffba\044\uffba\045" +
    "\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba" +
    "\054\uffba\055\uffba\056\uffba\057\uffba\061\uffba\062\uffba\063" +
    "\uffba\001\002\000\032\011\075\015\102\020\120\021\125" +
    "\022\121\023\124\040\106\041\117\042\104\053\126\064" +
    "\116\065\123\001\002\000\032\011\075\015\102\020\120" +
    "\021\125\022\121\023\124\040\106\041\117\042\104\053" +
    "\126\064\116\065\123\001\002\000\030\016\uffcf\025\uffcf" +
    "\044\143\045\150\046\141\047\142\050\151\051\147\061" +
    "\145\062\144\063\uffcf\001\002\000\030\016\uffd1\025\uffd1" +
    "\044\143\045\150\046\141\047\142\050\151\051\147\061" +
    "\145\062\144\063\uffd1\001\002\000\030\011\075\015\102" +
    "\020\120\021\125\022\121\023\124\040\106\041\117\053" +
    "\126\064\116\065\123\001\002\000\030\011\075\015\102" +
    "\020\120\021\125\022\121\023\124\040\106\041\117\053" +
    "\126\064\116\065\123\001\002\000\030\011\075\015\102" +
    "\020\120\021\125\022\121\023\124\040\106\041\117\053" +
    "\126\064\116\065\123\001\002\000\030\011\075\015\102" +
    "\020\120\021\125\022\121\023\124\040\106\041\117\053" +
    "\126\064\116\065\123\001\002\000\030\011\075\015\102" +
    "\020\120\021\125\022\121\023\124\040\106\041\117\053" +
    "\126\064\116\065\123\001\002\000\030\011\075\015\102" +
    "\020\120\021\125\022\121\023\124\040\106\041\117\053" +
    "\126\064\116\065\123\001\002\000\044\016\uffc5\025\uffc5" +
    "\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052" +
    "\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\061\uffc5" +
    "\062\uffc5\063\uffc5\001\002\000\044\016\uffca\025\uffca\044" +
    "\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca" +
    "\053\uffca\054\133\055\136\056\135\057\uffca\061\uffca\062" +
    "\uffca\063\uffca\001\002\000\044\016\uffc6\025\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053" +
    "\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\061\uffc6\062\uffc6" +
    "\063\uffc6\001\002\000\044\016\uffc8\025\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\057\uffc8\061\uffc8\062\uffc8\063" +
    "\uffc8\001\002\000\044\016\uffc9\025\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\057\uffc9\061\uffc9\062\uffc9\063\uffc9" +
    "\001\002\000\044\016\uffc7\025\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7" +
    "\055\uffc7\056\uffc7\057\uffc7\061\uffc7\062\uffc7\063\uffc7\001" +
    "\002\000\030\016\uffcc\025\uffcc\044\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\051\uffcc\061\145\062\144\063\uffcc\001" +
    "\002\000\004\017\177\001\002\000\032\011\075\015\102" +
    "\020\120\021\125\022\121\023\124\040\106\041\117\042" +
    "\104\053\126\064\116\065\123\001\002\000\004\063\uffef" +
    "\001\002\000\004\016\202\001\002\000\044\016\uffb8\025" +
    "\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8" +
    "\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\061" +
    "\uffb8\062\uffb8\063\uffb8\001\002\000\040\004\uff95\005\uff95" +
    "\006\uff95\007\uff95\010\uff95\011\uff95\014\uff95\026\uff95\032" +
    "\uff95\033\uff95\034\uff95\035\uff95\036\uff95\043\uff95\063\uff95" +
    "\001\002\000\036\011\075\015\102\020\120\021\125\022" +
    "\121\023\124\035\024\036\045\040\106\041\117\042\104" +
    "\053\126\064\116\065\123\001\002\000\004\063\212\001" +
    "\002\000\004\063\211\001\002\000\004\063\210\001\002" +
    "\000\040\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\011" +
    "\uff97\014\uff97\026\uff97\032\uff97\033\uff97\034\uff97\035\uff97" +
    "\036\uff97\043\uff97\063\uff97\001\002\000\040\004\uff96\005" +
    "\uff96\006\uff96\007\uff96\010\uff96\011\uff96\014\uff96\026\uff96" +
    "\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\043\uff96\063" +
    "\uff96\001\002\000\040\004\uff98\005\uff98\006\uff98\007\uff98" +
    "\010\uff98\011\uff98\014\uff98\026\uff98\032\uff98\033\uff98\034" +
    "\uff98\035\uff98\036\uff98\043\uff98\063\uff98\001\002\000\016" +
    "\004\027\005\017\006\006\007\020\010\013\011\220\001" +
    "\002\000\004\016\244\001\002\000\004\063\240\001\002" +
    "\000\004\063\227\001\002\000\004\011\226\001\002\000" +
    "\010\016\uff81\017\222\063\uff81\001\002\000\006\016\uff93" +
    "\063\uff93\001\002\000\036\011\075\015\102\020\120\021" +
    "\125\022\121\023\124\035\024\036\045\040\106\041\117" +
    "\042\104\053\126\064\116\065\123\001\002\000\006\016" +
    "\uff84\063\uff84\001\002\000\006\016\uff82\063\uff82\001\002" +
    "\000\006\016\uff83\063\uff83\001\002\000\006\017\uff94\063" +
    "\uff94\001\002\000\032\011\075\015\102\020\120\021\125" +
    "\022\121\023\124\040\106\041\117\042\104\053\126\064" +
    "\116\065\123\001\002\000\024\044\143\045\150\046\141" +
    "\047\142\050\151\051\147\061\145\062\144\063\231\001" +
    "\002\000\010\011\220\064\235\065\232\001\002\000\004" +
    "\011\075\001\002\000\004\016\uffe6\001\002\000\004\016" +
    "\uffe2\001\002\000\004\011\075\001\002\000\004\016\uffe4" +
    "\001\002\000\004\016\uffe3\001\002\000\032\011\075\015" +
    "\102\020\120\021\125\022\121\023\124\040\106\041\117" +
    "\042\104\053\126\064\116\065\123\001\002\000\024\044" +
    "\143\045\150\046\141\047\142\050\151\051\147\061\145" +
    "\062\144\063\242\001\002\000\010\011\220\064\235\065" +
    "\232\001\002\000\004\016\uffe7\001\002\000\004\013\022" +
    "\001\002\000\036\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\014\uffe8\026\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\043\uffe8\001\002\000\022\011\075\016" +
    "\250\020\056\021\067\022\061\023\065\040\063\041\066" +
    "\001\002\000\004\016\253\001\002\000\006\016\uffd5\063" +
    "\uffd5\001\002\000\004\016\uffa4\001\002\000\004\016\uffa5" +
    "\001\002\000\006\016\uffd4\063\uffd4\001\002\000\036\004" +
    "\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\014\uffde" +
    "\026\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\043" +
    "\uffde\001\002\000\036\004\uffdd\005\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\011\uffdd\014\uffdd\026\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\043\uffdd\001\002\000\036\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\014\uffd8\026" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\043\uffd8" +
    "\001\002\000\036\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010" +
    "\uffdb\011\uffdb\014\uffdb\026\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\043\uffdb\001\002\000\036\004\uffd9\005" +
    "\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\014\uffd9\026\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\043\uffd9\001" +
    "\002\000\004\031\262\001\002\000\004\015\263\001\002" +
    "\000\032\011\075\015\102\020\120\021\125\022\121\023" +
    "\124\040\106\041\117\042\104\053\126\064\116\065\123" +
    "\001\002\000\024\016\265\044\143\045\150\046\141\047" +
    "\142\050\151\051\147\061\145\062\144\001\002\000\004" +
    "\063\266\001\002\000\036\004\uffe5\005\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\014\uffe5\026\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\043\uffe5\001\002\000\036\004" +
    "\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\014\uffe0" +
    "\026\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\043" +
    "\uffe0\001\002\000\036\004\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\014\ufff3\026\ufff3\032\ufff3\033\ufff3\034" +
    "\ufff3\035\ufff3\036\ufff3\043\ufff3\001\002\000\046\002\ufff8" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\014" +
    "\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8" +
    "\034\ufff8\035\ufff8\036\ufff8\043\ufff8\001\002\000\004\015" +
    "\273\001\002\000\032\011\075\015\102\020\120\021\125" +
    "\022\121\023\124\040\106\041\117\042\104\053\126\064" +
    "\116\065\123\001\002\000\024\016\275\044\143\045\150" +
    "\046\141\047\142\050\151\051\147\061\145\062\144\001" +
    "\002\000\004\013\276\001\002\000\034\004\027\005\017" +
    "\006\006\007\020\010\013\011\047\026\uffec\032\051\033" +
    "\034\034\030\035\024\036\045\043\042\001\002\000\036" +
    "\004\027\005\017\006\006\007\020\010\013\011\047\014" +
    "\300\026\uffec\032\051\033\034\034\030\035\024\036\045" +
    "\043\042\001\002\000\042\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\014\uffe9\026\uffe9\027\303\030\301" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\043\uffe9\001" +
    "\002\000\004\013\022\001\002\000\036\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\011\uffed\014\uffed\026\uffed\032" +
    "\uffed\033\uffed\034\uffed\035\uffed\036\uffed\043\uffed\001\002" +
    "\000\004\015\304\001\002\000\032\011\075\015\102\020" +
    "\120\021\125\022\121\023\124\040\106\041\117\042\104" +
    "\053\126\064\116\065\123\001\002\000\024\016\306\044" +
    "\143\045\150\046\141\047\142\050\151\051\147\061\145" +
    "\062\144\001\002\000\004\013\022\001\002\000\042\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\014\uffe9" +
    "\026\uffe9\027\303\030\301\032\uffe9\033\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\043\uffe9\001\002\000\036\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\011\uffeb\014\uffeb\026\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\043\uffeb\001\002" +
    "\000\036\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011" +
    "\uffea\014\uffea\026\uffea\032\uffea\033\uffea\034\uffea\035\uffea" +
    "\036\uffea\043\uffea\001\002\000\004\063\313\001\002\000" +
    "\036\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\014\uffda\026\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036" +
    "\uffda\043\uffda\001\002\000\004\024\316\001\002\000\010" +
    "\017\uff94\024\uffb5\063\uff94\001\002\000\032\011\075\015" +
    "\102\020\120\021\125\022\121\023\124\040\106\041\117" +
    "\042\104\053\126\064\116\065\123\001\002\000\004\025" +
    "\320\001\002\000\004\063\uffee\001\002\000\036\004\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\014\uffdc\026" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\043\uffdc" +
    "\001\002\000\022\011\075\016\324\020\056\021\067\022" +
    "\061\023\065\040\063\041\066\001\002\000\004\016\325" +
    "\001\002\000\006\016\uffd7\063\uffd7\001\002\000\006\016" +
    "\uffd6\063\uffd6\001\002\000\004\015\ufff6\001\002\000\016" +
    "\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\001" +
    "\002\000\016\002\ufffe\004\027\005\017\006\006\007\020" +
    "\010\013\001\002\000\016\002\ufffd\004\027\005\017\006" +
    "\006\007\020\010\013\001\002\000\004\002\001\001\002" +
    "\000\004\016\334\001\002\000\004\013\022\001\002\000" +
    "\016\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa" +
    "\001\002\000\016\002\uffff\004\027\005\017\006\006\007" +
    "\020\010\013\001\002\000\020\004\027\005\017\006\006" +
    "\007\020\010\013\012\uffb0\016\uffb0\001\002\000\006\012" +
    "\344\016\345\001\002\000\004\011\075\001\002\000\006" +
    "\012\uffb2\016\uffb2\001\002\000\006\012\uffaf\016\uffaf\001" +
    "\002\000\014\004\027\005\017\006\006\007\020\010\013" +
    "\001\002\000\004\013\ufff5\001\002\000\006\012\uffb1\016" +
    "\uffb1\001\002\000\004\015\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\022\002\011\003\006\004\015\005\014\023" +
    "\010\032\013\041\007\067\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\006\004\015\005\014\032\335\067\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\326\004\015\005\014\023\010\041\327\067\004" +
    "\001\001\000\002\001\001\000\004\012\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\005\025\007\052\013\030\014\031\015\035\016\034\017" +
    "\032\020\022\021\047\027\051\033\045\037\037\040\036" +
    "\042\043\043\042\061\040\065\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\313" +
    "\001\001\000\002\001\001\000\030\007\126\022\114\024" +
    "\113\025\107\036\110\044\311\045\104\046\106\047\112" +
    "\054\121\061\111\001\001\000\002\001\001\000\042\005" +
    "\025\007\052\013\030\015\267\016\034\017\032\020\022" +
    "\021\047\027\051\033\045\037\037\040\036\042\043\043" +
    "\042\061\040\065\024\001\001\000\002\001\001\000\004" +
    "\012\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\007\126\022\114\024\113\025\107\036\110" +
    "\044\102\045\104\046\106\047\112\054\121\061\111\001" +
    "\001\000\024\007\075\051\072\052\071\055\067\056\073" +
    "\057\070\060\061\062\057\063\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\007\075\051\072\052\071\055\067\056\073\057" +
    "\070\060\061\063\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\007\126\022\114\024\113\025\107\036" +
    "\110\044\200\045\104\046\106\047\112\054\121\061\111" +
    "\001\001\000\002\001\001\000\024\007\126\022\114\024" +
    "\174\036\110\045\104\046\106\047\112\054\121\061\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\154\066\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\007\126\036\153\045\104\047" +
    "\112\054\121\061\111\001\001\000\006\031\137\066\145" +
    "\001\001\000\004\026\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\007\126" +
    "\022\114\024\113\025\107\036\110\044\130\045\104\046" +
    "\106\047\112\054\121\061\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\007\126\036" +
    "\136\045\104\047\112\054\121\061\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\007" +
    "\126\022\114\024\152\036\110\045\104\046\106\047\112" +
    "\054\121\061\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\007\126\022\114\024\151\036\110\045\104\046" +
    "\106\047\112\054\121\061\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\137\001" +
    "\001\000\004\031\137\001\001\000\002\001\001\000\026" +
    "\007\126\022\114\024\113\025\157\036\110\045\104\046" +
    "\106\047\112\054\121\061\111\001\001\000\026\007\126" +
    "\022\114\024\113\025\156\036\110\045\104\046\106\047" +
    "\112\054\121\061\111\001\001\000\006\031\154\066\155" +
    "\001\001\000\006\031\154\066\155\001\001\000\020\007" +
    "\126\022\173\036\110\045\104\047\112\054\121\061\111" +
    "\001\001\000\020\007\126\022\172\036\110\045\104\047" +
    "\112\054\121\061\111\001\001\000\020\007\126\022\171" +
    "\036\110\045\104\047\112\054\121\061\111\001\001\000" +
    "\020\007\126\022\170\036\110\045\104\047\112\054\121" +
    "\061\111\001\001\000\020\007\126\022\167\036\110\045" +
    "\104\047\112\054\121\061\111\001\001\000\020\007\126" +
    "\022\166\036\110\045\104\047\112\054\121\061\111\001" +
    "\001\000\004\026\133\001\001\000\004\026\133\001\001" +
    "\000\004\026\133\001\001\000\004\026\133\001\001\000" +
    "\004\026\133\001\001\000\004\026\133\001\001\000\004" +
    "\031\137\001\001\000\002\001\001\000\030\007\126\022" +
    "\114\024\113\025\107\036\110\044\177\045\104\046\106" +
    "\047\112\054\121\061\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\007\126\022\114\024\113\025\107\036\110\042\206\043" +
    "\205\044\204\045\104\046\106\047\112\054\121\061\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\216\016\215\017\214\027\051\035\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\220\001\001\000\002\001" +
    "\001\000\034\007\126\022\114\024\113\025\107\036\110" +
    "\042\224\043\223\044\222\045\104\046\106\047\112\054" +
    "\121\061\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\007\126\022" +
    "\114\024\113\025\227\036\110\045\104\046\106\047\112" +
    "\054\121\061\111\001\001\000\006\031\154\066\155\001" +
    "\001\000\006\017\233\034\232\001\001\000\004\007\236" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\007\126\022\114\024\113\025\240\036\110\045\104\046" +
    "\106\047\112\054\121\061\111\001\001\000\006\031\154" +
    "\066\155\001\001\000\006\017\233\034\242\001\001\000" +
    "\002\001\001\000\004\012\244\001\001\000\002\001\001" +
    "\000\022\006\246\007\251\051\250\052\071\055\067\056" +
    "\073\057\070\060\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\007\126\022\114\024\113\025\263" +
    "\036\110\045\104\046\106\047\112\054\121\061\111\001" +
    "\001\000\006\031\154\066\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\007\126\022\114" +
    "\024\113\025\273\036\110\045\104\046\106\047\112\054" +
    "\121\061\111\001\001\000\006\031\154\066\155\001\001" +
    "\000\002\001\001\000\044\005\025\007\052\013\030\014" +
    "\276\015\035\016\034\017\032\020\022\021\047\027\051" +
    "\033\045\037\037\040\036\042\043\043\042\061\040\065" +
    "\024\001\001\000\042\005\025\007\052\013\030\015\267" +
    "\016\034\017\032\020\022\021\047\027\051\033\045\037" +
    "\037\040\036\042\043\043\042\061\040\065\024\001\001" +
    "\000\004\053\301\001\001\000\004\012\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\007\126\022\114" +
    "\024\113\025\304\036\110\045\104\046\106\047\112\054" +
    "\121\061\111\001\001\000\006\031\154\066\155\001\001" +
    "\000\004\012\306\001\001\000\004\053\307\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\007" +
    "\126\022\114\024\113\025\107\036\110\044\316\045\104" +
    "\046\106\047\112\054\121\061\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\006\322" +
    "\007\251\051\250\052\071\055\067\056\073\057\070\060" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\006\004\015\005\014\032\330\067\004\001\001\000\012" +
    "\003\326\004\015\005\014\067\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\334\001\001\000\002" +
    "\001\001\000\012\003\326\004\015\005\014\067\004\001" +
    "\001\000\010\005\340\010\337\011\341\001\001\000\002" +
    "\001\001\000\004\007\342\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\340\011\345\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    // Método que se invoca cuando ocurre un error de sintaxis
   public void syntax_error(Symbol s){
    if (s == null) {
        System.err.println("El objeto Symbol proporcionado es nulo.");
        return;
    }
    this.s = s;
    System.err.println("Error de sintaxis en la línea " + s.left + ", columna " + s.right + ": se encontró " + s.value);
}

    // Devuelve el símbolo actual
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {



    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;

    StringBuffer cod3D = new StringBuffer();
    int currentTemp = 1;

    public void imprimirTablaSimbolos(){
        for (String key : listaTablasSimbolos.keySet()){
            System.out.println("Tabla de simbolo: "+ key);
            System.out.println("Valores: ");
            for (String item : listaTablasSimbolos.get(key)){
                 System.out.println(item);
            }
            
            System.out.println("");
        }
    }
 public void imprimirCod3D() {
        System.out.println(cod3D.toString());
    }

public String determinarTipo(String valor) {
    return null;
        }




  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // asignacion_opcional ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_opcional",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // asignacion_opcional ::= IGUAL escritura 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_opcional",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // asignacion_opcional ::= IGUAL lectura 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_opcional",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // asignacion_opcional ::= IGUAL expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_opcional",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operador_logico ::= DISYUNCION 
            {
              Object RESULT =null;
		RESULT = "#";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_logico",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operador_logico ::= CONJUNCION 
            {
              Object RESULT =null;
		RESULT = "^";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_logico",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operador_unario ::= RESTA 
            {
              Object RESULT =null;
		RESULT = "-";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_unario",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operador_unario ::= DECREMENTO 
            {
              Object RESULT =null;
		RESULT = "--";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_unario",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operador_unario ::= INCREMENTO 
            {
              Object RESULT =null;
		RESULT = "++";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_unario",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operador_relacional ::= DIFERENTES 
            {
              Object RESULT =null;
		RESULT = "!=";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operador_relacional ::= IGUALES 
            {
              Object RESULT =null;
		RESULT = "==";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operador_relacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		RESULT = ">=";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operador_relacional ::= MAYOR_QUE 
            {
              Object RESULT =null;
		RESULT = ">";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operador_relacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		RESULT = "<=";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operador_relacional ::= MENOR_QUE 
            {
              Object RESULT =null;
		RESULT = "<";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operador_relacional",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // op_mult ::= DIVISION 
            {
              Object RESULT =null;
		RESULT = "/";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_mult",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // op_mult ::= MODULO 
            {
              Object RESULT =null;
		RESULT = "~";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_mult",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // op_mult ::= MULTIPLICACION 
            {
              Object RESULT =null;
		RESULT = "*";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_mult",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // asignacion ::= IDENTIFICADOR asignacion_opcional 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aopleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aopright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object aop = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                    
                List<String> lista = listaTablasSimbolos.get(currentHash);
                System.err.println( listaTablasSimbolos.get(currentHash));
                boolean found = false;
                for (String s : lista) {
                    if (s.startsWith(idVar + ":")) {
                        found = true;
                    }
                }

                if (!found) {
                    System.err.println("Error: variable no declarada: " + idVar.toString());
                }else{
                    System.out.println("Parser: identificador(agregar o verificar) "+ idVar.toString());
                    listaTablasSimbolos.get(currentHash).add(idVar.toString());
                    String temp = "t" + (currentTemp++);
                    cod3D.append("\n" + idVar + " = " + temp);
                }
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // izquierdaDeclaracion ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                                     cod3D.append("\ndata_"+t.toString()+" "+idVar.toString());
                                                                     RESULT = idVar.toString();
                                                                     System.out.println("Parser: identificador (agregar o verificar) " + idVar.toString());
                                                                     listaTablasSimbolos.get(currentHash).add(idVar.toString() + ":" + t.toString());
                                                             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("izquierdaDeclaracion",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // declaracion ::= izquierdaDeclaracion DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // declaracion ::= izquierdaDeclaracion IGUAL escritura DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // declaracion ::= izquierdaDeclaracion IGUAL lectura DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // declaracion ::= izquierdaDeclaracion IGUAL expresion DOLAR 
            {
              Object RESULT =null;
		int crealeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int crearight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object crea = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                                                //3D 
                                                                    String[] partesExpr = e.toString().split("::");
                                                                    cod3D.append( "\n"+crea.toString()+" = "+partesExpr[1]); 
                                                                    System.out.println("PARSER: expresión: "+partesExpr[0]); 
                                                                    RESULT = "\n"+partesExpr[0]+" = "+partesExpr[1]+"\n"+crea.toString()+" = "+partesExpr[0];
                                                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // literal_string ::= LITERAL_STRING 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = n.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_string",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // literal_char ::= LITERAL_CHAR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = n.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_char",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // literal_bool ::= FALSE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = n.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_bool",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // literal_bool ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_bool",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // literal_float ::= LITERAL_FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = n.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_float",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // literal_int ::= LITERAL_INT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = n.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal_int",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // literal ::= literal_string 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // literal ::= literal_char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // literal ::= literal_bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // literal ::= literal_float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // literal ::= literal_int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("literal",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // identi_liter ::= literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("identi_liter",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // identi_liter ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("identi_liter",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // paramInv ::= literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramInv",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // paramInv ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramInv",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parametrosInv ::= paramInv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametrosInv",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parametrosInv ::= parametrosInv COMA paramInv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametrosInv",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tipo ::= STRING 
            {
              Object RESULT =null;
		RESULT = "string";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tipo ::= CHAR 
            {
              Object RESULT =null;
		RESULT = "char";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tipo ::= BOOL 
            {
              Object RESULT =null;
		RESULT = "bool";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		RESULT = "float";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipo ::= INT 
            {
              Object RESULT =null;
		RESULT = "int";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // param ::= tipo identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parametros ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parametros ::= parametros COMA param 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // parametros ::= param 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // llamada_funcion ::= identificador PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("llamada_funcion",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // llamada_funcion ::= identificador PARENTESIS_ABIERTO parametrosInv PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("llamada_funcion",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // identificador ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = re.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("identificador",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // array_expr ::= identificador CORCHETE_ABIERTO expresion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("array_expr",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // factor ::= array_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // factor ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                                                            RESULT = e.toString();
                                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= expresion_unaria 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= operador_unario factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= identificador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                String temp = "t" + (currentTemp++);
                                cod3D.append("\n" + temp + " = " + n);
                                RESULT = n + "::" + temp;
                                System.out.println("Parser: identificador en expresion: " + n);
                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= LITERAL_STRING 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                    String temp = "t" + (currentTemp++);
                                    cod3D.append("\n" + temp + "=" + n);
                                    RESULT = n + "::" + temp;
                                    System.out.println("Parser: literal string en expresion: " + n);
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= LITERAL_CHAR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                String temp = "t" + (currentTemp++);
                                cod3D.append("\n" + temp + " = " + n);
                                RESULT = n + "::" + temp;
                                System.out.println("Parser: literal char en expresion: " + n);
                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= FALSE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        String temp = "t" + (currentTemp++);
                        cod3D.append("\n" + temp + " = " + 0);
                        RESULT = "false::" + temp;
                        System.out.println("Parser: literal bool en expresion: false");
                      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= TRUE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        String temp = "t" + (currentTemp++);
                        cod3D.append("\n" + temp + " = " + 1);
                        RESULT = "true::" + temp;
                        System.out.println("Parser: literal bool en expresion: true");
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= LITERAL_FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                String temp = "t" + (currentTemp++);
                cod3D.append("\n" + temp + " = " + n.toString());
                RESULT = n.toString() + "::" + temp;
                System.out.println("Parser: literal float en expresion: " + n.toString());
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= LITERAL_INT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                 String temp = "t" + (currentTemp++);
                 cod3D.append("\n" + temp + " = " + n.toString());
                 RESULT = n.toString() + "::" + temp;
                 System.out.println("Parser: literal int en expresion: " + n.toString());
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term ::= term op_mult factor 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opMleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opMright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object opM = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        //COD3
                        String[] partesExpr1 = e1.toString().split("::");
                        String[] partesExpr2 = e2.toString().split("::");
                        String temp = "t"+(currentTemp++);
                        cod3D.append("\n"+temp+" = "+partesExpr1[1]+" "+opM+" "+partesExpr2[1]);
                        RESULT = partesExpr1[0]+opM+partesExpr2[0]+"::"+temp;
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("term",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // term ::= factor 
            {
              Object RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object factor = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = factor.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("term",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion_binaria ::= expresion_binaria DIVISION term 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        //COD3
                        String[] partesExpr1 = e1.toString().split("::");
                        String[] partesExpr2 = e2.toString().split("::");
                        String temp = "t"+(currentTemp++);
                        cod3D.append("\n"+temp+" = "+partesExpr1[1]+" / "+partesExpr2[1]);
                        RESULT = partesExpr1[0]+"/"+partesExpr2[0]+"::"+temp;
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_binaria",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion_binaria ::= expresion_binaria MODULO term 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        //COD3
                        String[] partesExpr1 = e1.toString().split("::");
                        String[] partesExpr2 = e2.toString().split("::");
                        String temp = "t"+(currentTemp++);
                        cod3D.append("\n"+temp+" = "+partesExpr1[1]+" ~ "+partesExpr2[1]);
                        RESULT = partesExpr1[0]+"~"+partesExpr2[0]+"::"+temp;
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_binaria",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion_binaria ::= expresion_binaria MULTIPLICACION term 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        //COD3
                        String[] partesExpr1 = e1.toString().split("::");
                        String[] partesExpr2 = e2.toString().split("::");
                        String temp = "t"+(currentTemp++);
                        cod3D.append("\n"+temp+" = "+partesExpr1[1]+" * "+partesExpr2[1]);
                        RESULT = partesExpr1[0]+"*"+partesExpr2[0]+"::"+temp;
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_binaria",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion_binaria ::= expresion_binaria POTENCIA term 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        //COD3
                        String[] partesExpr1 = e1.toString().split("::");
                        String[] partesExpr2 = e2.toString().split("::");
                        String temp = "t"+(currentTemp++);
                        cod3D.append("\n"+temp+" = "+partesExpr1[1]+" ** "+partesExpr2[1]);
                        RESULT = partesExpr1[0]+"**"+partesExpr2[0]+"::"+temp;
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_binaria",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion_binaria ::= expresion_binaria RESTA term 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        //COD3
                        String[] partesExpr1 = e1.toString().split("::");
                        String[] partesExpr2 = e2.toString().split("::");
                        String temp = "t"+(currentTemp++);
                        cod3D.append("\n"+temp+" = "+partesExpr1[1]+" - "+partesExpr2[1]);
                        RESULT = partesExpr1[0]+"-"+partesExpr2[0]+"::"+temp;
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_binaria",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion_binaria ::= expresion_binaria SUMA term 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        //COD3
                        String[] partesExpr1 = e1.toString().split("::");
                        String[] partesExpr2 = e2.toString().split("::");
                        String temp = "t"+(currentTemp++);
                        cod3D.append("\n"+temp+" = "+partesExpr1[1]+" + "+partesExpr2[1]);
                        RESULT = partesExpr1[0]+"+"+partesExpr2[0]+"::"+temp;
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_binaria",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion_binaria ::= term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = t.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_binaria",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion_logica ::= NEGACION expresion_logica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion_logica ::= expresion_logica operador_logico expresion_logica 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opLleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opLright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object opL = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            String[] partesExpr1 = e1.toString().split("::");
                            String[] partesExpr2 = e2.toString().split("::");
                            String temp = "t"+(currentTemp++);
                            cod3D.append("\n"+temp+" = "+partesExpr1[1]+" "+opL +" "+partesExpr2[1]);
                            RESULT = partesExpr1[0]+opL+partesExpr2[0]+"::"+temp;
                            
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion_logica ::= expresion_binaria 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = ex.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion_relacional ::= expresion_relacional operador_relacional expresion_relacional 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opRleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opRright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object opR = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            String[] partesExpr1 = e1.toString().split("::");
                            String[] partesExpr2 = e2.toString().split("::");
                            String temp = "t"+(currentTemp++);
                            cod3D.append("\n"+temp+" = "+partesExpr1[1]+" "+opR +" "+partesExpr2[1]);
                            RESULT = partesExpr1[0]+opR+partesExpr2[0]+"::"+temp;
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion_relacional ::= expresion_logica operador_relacional expresion_logica 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opRleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opRright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object opR = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            String[] partesExpr1 = e1.toString().split("::");
                            String[] partesExpr2 = e2.toString().split("::");
                            String temp = "t"+(currentTemp++);
                            cod3D.append("\n"+temp+" = "+partesExpr1[1]+" "+opR +" "+partesExpr2[1]);
                            RESULT = partesExpr1[0]+opR+partesExpr2[0]+"::"+temp;
                            
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion_relacional ::= expresion_relacional operador_logico expresion_relacional 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opLleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opLright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object opL = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            String[] partesExpr1 = e1.toString().split("::");
                            String[] partesExpr2 = e2.toString().split("::");
                            String temp = "t"+(currentTemp++);
                            cod3D.append("\n"+temp+" = "+partesExpr1[1]+" "+opL +" "+partesExpr2[1]);
                            RESULT = partesExpr1[0]+opL+partesExpr2[0]+"::"+temp;
                            


                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion_relacional ::= expresion_logica 
            {
              Object RESULT =null;
		int exlogleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exlogright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object exlog = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = exlog.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_relacional",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= expresion_relacional 
            {
              Object RESULT =null;
		int exreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object exre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = exre.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // escritura ::= PRINT PARENTESIS_ABIERTO identi_liter PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("escritura",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // escritura ::= PRINT PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("escritura",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lectura ::= READ PARENTESIS_ABIERTO identi_liter PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lectura",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lectura ::= READ PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lectura",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= BREAK DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= declaracion_arreglo DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= RETURN expresion DOLAR 
            {
              Object RESULT =null;
		
            List<String> lista = listaTablasSimbolos.get(currentHash);
            String tipoFuncion = lista.get(0); // obtén la primera posición
            String[] partes = tipoFuncion.split(":"); // dividir el string en partes
            String valor = partes[partes.length - 1]; 


            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= llamada_funcion DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= asignacion_arreglo DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= escritura DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= lectura DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= estructura_control 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= asignacion DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= declaracion 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = d.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inc_for ::= asignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inc_for",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inc_for ::= DECREMENTO identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inc_for",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inc_for ::= INCREMENTO identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inc_for",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion_do_while ::= DO cuerpo_funcion WHILE PARENTESIS_ABIERTO expresion_relacional PARENTESIS_CERRADO DOLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_do_while",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condicion_for ::= declaracion DOLAR expresion_relacional DOLAR inc_for 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_for",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condicion_for ::= asignacion DOLAR expresion_relacional DOLAR inc_for 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion_for",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion_for ::= FOR PARENTESIS_ABIERTO condicion_for PARENTESIS_CERRADO cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // else_parte ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("else_parte",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // else_parte ::= ELSE cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("else_parte",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // else_parte ::= ELIF PARENTESIS_ABIERTO expresion_relacional PARENTESIS_CERRADO cuerpo_funcion else_parte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("else_parte",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ifInicio ::= 
            {
              Object RESULT =null;
		
                    String temp = "t" + (currentTemp++);
                    
                    cod3D.append("\n" + temp + "_start:");
                    
                   
                        
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ifInicio",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion_if ::= ifInicio IF PARENTESIS_ABIERTO expresion_relacional PARENTESIS_CERRADO LLAVE_ABIERTA bloque LLAVE_CERRADA else_parte 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_if",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion_arreglo ::= tipo identificador CORCHETE_ABIERTO expresion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // asignacion_arreglo ::= identificador CORCHETE_ABIERTO expresion CORCHETE_CERRADO IGUAL expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // estructura_control ::= declaracion_for 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // estructura_control ::= declaracion_do_while 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // estructura_control ::= declaracion_if 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bloque ::= bloque sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bloque ::= sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // nombre_funcion ::= identificadorFuncion PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nombre_funcion",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // identificadorFuncion ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		

                        //COD3
                        cod3D.append("\n_"+i+":");
                        RESULT = i.toString();  

                        System.out.println("/_+++Nueva tabla de simbolos funcion " + i.toString());
                        String tipoTabla = "main";
                        if(i.toString().equals("main"))
                            tipoTabla = "tipo:main:" +t.toString();
                        else
                            tipoTabla = "tipo:funcion:"+ t.toString();

                        ArrayList<String> funcionMain = new ArrayList<String>();
                        currentHash = i.toString();
                        funcionMain.add(tipoTabla);
                        listaTablasSimbolos.put(currentHash, funcionMain);
                        
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("identificadorFuncion",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcion ::= nombre_funcion cuerpo_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funcion",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo_funcion ::= LLAVE_ABIERTA bloque LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo_funcion",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nombre_main ::= INT MAIN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
 //COD3
                        cod3D.append("\n_"+m+":");
                        RESULT = m.toString();  
                        System.out.println("/_+++Nueva tabla de simbolos main ");
                        String tipoTabla;
                        tipoTabla = "tipo:main:" +i.toString();

                        ArrayList<String> funcionMain = new ArrayList<String>();
                        currentHash = m.toString();
                        funcionMain.add(tipoTabla);
                        listaTablasSimbolos.put(currentHash, funcionMain);
                        
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nombre_main",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // main ::= nombre_main PARENTESIS_ABIERTO PARENTESIS_CERRADO cuerpo_funcion 
            {
              Object RESULT =null;
		 System.out.println("/_---Cierra tabla simbolos:---_/ \n\n\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("main",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funciones ::= funcion 
            {
              Object RESULT =null;
		int func1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int func1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object func1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("/_---Cierra tabla simbolos:---_/"+func1+"\n\n\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funciones",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funciones ::= funciones funcion 
            {
              Object RESULT =null;
		int func1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int func1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object func1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("/_---Cierra tabla simbolos:---_/"+func1+"\n\n\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funciones",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= funciones main funciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= funciones main 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= main funciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= main 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

